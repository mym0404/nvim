---@diagnostic disable: undefined-global
local lush = require("lush")
-- local hsl = lush.hsl
-- local hsluv = lush.hsluv

local undercurl = require("utils/utils").is_windows and "undercurl,bold" or "undercurl"
local palette = {
  theme = "#c4d194",
  error_label = "#E0787C",
  error_undercurl = "#E0787C",
  warn_label = "#EED45F",
  warn_undercurl = "#EED45F",
  info_label = "#2f81f7",
  info_undercurl = "#2f81f7",
  hint_label = "#acacac",
  hint_undercurl = "#acacac",
  untracked_label = "#E0787C",
  untracked_undercurl = "#E0787C",
  text = "#ffffff",
  text_sub = "#666666",
  text_sub2 = "#333333",
}
local special = { fg = "#c79cff", bg = "#2a2136", gui = "bold" }
local text = { fg = palette.text }
local text_sub = { fg = palette.text_sub }
local border = { fg = "#424242" }
local win_border = { fg = "#313131" }
local bg = {
  selected = "#324963",
  search = "#0269c9",
}

local vcs = {
  added = {
    label = { fg = "#AFE8AF" },
    code = { bg = "#374A37" },
  },
  modified = {
    label = { fg = "#72A7D7" },
    code = { bg = "#303D47" },
  },
  deleted = {
    label = { fg = palette.error_label },
    code = { bg = "#9B464B" },
  },
  conflicted = {
    code = { bg = "#442A45" },
  },
  ignored = {
    label = { fg = "#736c41", gui = "italic" },
  },
  untracked = {
    label = { fg = palette.untracked_label },
  },
}

local code = {
  keyword = { fg = "#79c0ff" },
  modifier = { fg = "#79c0ff" },
  module = { fg = "#94B0CB" },
}

local error = { fg = "#FD9491" }
local error_line = { fg = error.fg, bg = "#772e2c" }
local warn = { fg = "#EED45F" }
local warn_line = { fg = warn.fg, bg = "#5c4f17" }
local info = { fg = "#2f81f7" }
local info_line = { fg = info.fg, bg = "#1c3d6a" }
local hint = { fg = "#acacac" }
local hint_line = { fg = hint.fg, bg = "#222222" }

local theme = lush(function(injected_functions)
  local sym = injected_functions.sym
  return {
    Special(special),
    Type({ fg = "#ffa657" }),
    PreProc({ fg = "#ff7b72" }),
    Keyword(code.keyword),
    Statement({ fg = "#ff7b72" }),
    Conditional({ fg = "#ff7b72" }),
    FlashBackdrop({ fg = "#828282" }),
    Substitute({ bg = "#31f7f4", fg = "black", gui = "bold" }),
    Number({ fg = "#809DFF" }),
    Search({ bg = bg.search, fg = text.fg, gui = "bold" }),
    Normal({ fg = text.fg }),
    Visual({ bg = bg.selected }),

    VertSplit(win_border),
    WinSeparator(win_border),

    Added(vcs.added.code),
    Changed(vcs.modified.code),
    Removed(vcs.deleted.code),

    DiffAdd(vcs.added.code),
    DiffDelete(vcs.deleted.code),
    DiffChange(vcs.modified.code),
    DiffText({ bg = "#171b22", fg = "#e6edf3" }),
    diffOldFile({ fg = "#d29922" }),
    diffIndexLine({ fg = "#ff7b72" }),
    diffLine({ fg = "#79c0ff" }),
    diffFile({ fg = "#2f81f7" }),
    diffNewFile({ fg = "#7d8590" }),
    diffAdded({ Added }),
    diffChanged({ Changed }),
    diffRemoved({ Removed }),

    Error(error),
    Hint(hint),
    Info(info),
    Warn(warn),
    VirtualTextHint({ fg = "#7d8590" }),

    YankyPut({ fg = info_line.fg, bg = info_line.bg, gui = "bold" }),
    YankyYanked({ fg = info_line.fg, bg = info_line.bg, gui = "bold" }),

    DiagnosticError(error),
    DiagnosticHint(hint),
    DiagnosticInfo(info),
    DiagnosticWarn(warn),
    DiagnosticVirtualTextHint(hint),

    TermCursor({ gui = "reverse" }),
    LineNr({ fg = "#939393", gui = "bold" }),
    LineNrAbove({ LineNr, gui = "bold" }),
    LineNrBelow({ LineNr, gui = "bold" }),
    IncSearch({ bg = "red", fg = "white", gui = "bold" }),
    NonText(text_sub),
    CursorLineNr({ fg = "#e6edf3", gui = "bold" }),
    Constant({ Normal }),
    TabLineFill({}),
    lualine_c_16_LV_MatchParen_inactive({ bg = "#04070d", fg = "#e6edf3", gui = "bold,nocombine" }),

    DiagnosticDeprecated({ gui = "strikethrough", sp = "nvimlightred" }),

    NoiceFormatProgressDone({ bg = "#3c3b33" }),
    TodoSignNOTE({ fg = "#7d8590" }),
    TodoFgNOTE({ fg = "#7d8590" }),
    TodoBgNOTE({ bg = "#7d8590", fg = "#0d1117", gui = "bold" }),
    TodoSignPERF({ fg = "#e6edf3" }),
    TodoFgPERF({ fg = "#e6edf3" }),
    TodoBgPERF({ bg = "#e6edf3", fg = "#0d1117", gui = "bold" }),
    TodoSignTEST({ fg = "#e6edf3" }),
    TodoFgTEST({ fg = "#e6edf3" }),
    TodoBgTEST({ bg = "#e6edf3", fg = "#0d1117", gui = "bold" }),
    TodoSignWARN({ fg = "#d29922" }),
    TodoFgWARN({ fg = "#d29922" }),
    TodoBgWARN({ bg = "#d29922", fg = "#0d1117", gui = "bold" }),
    TodoSignHACK({ fg = "#d29922" }),
    TodoFgHACK({ fg = "#d29922" }),
    TodoBgHACK({ bg = "#d29922", fg = "#0d1117", gui = "bold" }),
    TodoSignFIX({ fg = "#f85149" }),
    TodoFgFIX({ fg = "#f85149" }),
    TodoBgFIX({ bg = "#f85149", fg = "#0d1117", gui = "bold" }),
    TodoSignTODO({ fg = "#2f81f7" }),
    TodoFgTODO({ fg = "#2f81f7" }),
    TodoBgTODO({ bg = "#2f81f7", fg = "#0d1117", gui = "bold" }),
    SnacksBackdrop({ bg = "red" }),
    MiniPickMatchRanges({ fg = "#d29922" }),
    MiniPickPrompt({ fg = "#79c0ff" }),
    IndentBlanklineContextStart({ gui = "underline", sp = "#f0883e" }),
    NvimTreeImageFile({ fg = "#e3b341" }),
    NvimTreeRootFolder({ fg = "#e6edf3", gui = "bold" }),
    NvimTreeEndOfBuffer({ fg = "#04070d" }),
    MiniCursorword({ bg = "#17335a" }),
    MiniDiffOverChange({ bg = "#484f58", fg = "#e6edf3" }),
    MiniPickHeader({ fg = "#79c0ff" }),
    NvimTreeGitRenamed({ fg = "#a371f7" }),
    MiniClueNextKey({ fg = "#2f81f7" }),
    MiniStarterFooter({ fg = "#6e7681", gui = "italic" }),
    MiniStarterHeader({ fg = "#58a6ff" }),
    MiniStarterItemBullet({ fg = "#161b22" }),
    MiniStarterItemPrefix({ fg = "#d29922" }),
    MiniStarterQuery({ fg = "#2f81f7" }),
    MiniStatuslineDevinfo({ bg = "#484f58", fg = "#e6edf3" }),
    MiniStatuslineFileinfo({ bg = "#484f58", fg = "#e6edf3" }),
    MiniStatuslineFilename({ bg = "#0d1117", fg = "#7a7f85" }),
    MiniStatuslineInactive({ bg = "#04070d", fg = "#7a7f85" }),
    MiniStatuslineModeCommand({ bg = "#d2a8ff", fg = "#0d1117", gui = "bold" }),
    MiniStatuslineModeInsert({ bg = "#3fb950", fg = "#0d1117", gui = "bold" }),
    MiniStatuslineModeNormal({ bg = "#58a6ff", fg = "#0d1117", gui = "bold" }),
    MiniStatuslineModeOther({ fg = "#0d1117", gui = "bold" }),
    MiniStatuslineModeReplace({ bg = "#ff7b72", fg = "#0d1117", gui = "bold" }),
    lessVariable({ fg = "#e6edf3" }),
    MiniTablineModifiedHidden({ bg = "#e6edf3", fg = "#0d1117" }),
    MiniTablineModifiedVisible({ bg = "#04070d", fg = "#43698b" }),
    MiniTablineTabpagesection({ bg = "#1c3d6a", gui = "bold" }),
    MiniTestFail({ fg = "#ff7b72", gui = "bold" }),
    MiniTestPass({ fg = "#3fb950", gui = "bold" }),
    MiniTrailspace({ bg = "#ff7b72" }),
    CmpItemKindSnippet({ fg = "#7d8590" }),
    NotifyDEBUGTitle({ fg = "#e6edf3" }),
    NotifyTRACETitle({ fg = "#d2a8ff" }),
    NotifyERRORTitle({ fg = "#ff7b72" }),
    NotifyWARNTitle({ fg = "#d29922" }),
    NotifyINFOTitle({ fg = "#3fb950" }),
    TreesitterContext({ bg = "#132339" }),
    WhichKeyFloat({ bg = "#04070d" }),
    DapUIType({ fg = "#bc8cff" }),
    NeogitDiffContextHighlight({ bg = "#171b22" }),
    yamlFlowMappingKey({ fg = "#7ee787" }),
    yamlBlockMappingKey({ fg = "#7ee787" }),
    MiniTablineVisible({ bg = "#43698b", fg = "#04070d" }),
    jsonKeyword({ fg = "#7ee787" }),
    MiniTablineModifiedCurrent({ fg = "#5e94c5", gui = "bold" }),
    MiniTablineHidden({ fg = "#e6edf3" }),
    MiniTablineCurrent({ bg = "#5e94c5", fg = "#04070d", gui = "bold" }),
    MiniStatuslineModeVisual({ bg = "#d29922", fg = "#0d1117", gui = "bold" }),
    MiniCursorwordCurrent({ bg = "#17335a" }),
    LspTroubleCount({ bg = "#6e7681", fg = "#bc8cff" }),
    NvimTreeOpenedFile({ fg = "#79c0ff" }),
    NvimTreeGitDeleted({ fg = "#f85149" }),
    htmlTag({ fg = "#7ee787" }),
    cssBraces({ fg = "#e6edf3" }),
    DapUIThread({ fg = "#3fb950", gui = "bold" }),
    DapUIScope({ fg = "#76e3ea" }),
    DapUIWatchesEmpty({ fg = "#ff7b72" }),
    DapUIWatchesValue({ fg = "#3fb950" }),
    DapUIBreakpointsDisabledLine({ fg = "#6e7681" }),
    DapUIModifiedValue({ fg = "#76e3ea", gui = "bold" }),
    DashboardFooter({ fg = "#79c0ff", gui = "italic" }),
    IndentBlanklineChar({ fg = "#23272d" }),
    IndentBlanklineContextChar({ fg = "#475f68" }),
    LspTroubleText({ fg = "#7d8590" }),
    LspTroubleNormal({ bg = "#04070d", fg = "#6e7681" }),
    MiniClueSeparator({ fg = "#7d8590" }),
    MiniDiffSignAdd({ fg = "#3fb950" }),
    MiniDiffSignChange({ fg = "#d29922" }),
    MiniDiffSignDelete({ fg = "#f85149" }),
    MiniFilesFile({ fg = "#e6edf3" }),
    MiniFilesTitleFocused({ fg = "#e6edf3", gui = "bold" }),
    MiniJump2dSpot({ fg = "#bc8cff", gui = "bold" }),
    MiniJump2dSpotAhead({ fg = "#2f81f7", gui = "nocombine" }),
    MiniJump2dSpotUnique({ fg = "#d29922", gui = "bold" }),
    MiniMapSymbolLine({ fg = "#2f81f7" }),
    MiniMapSymbolView({ fg = "#1e4273" }),
    MiniIconsPurple({ fg = "#bc8cff" }),
    MiniIconsGreen({ fg = "#56d364" }),
    MiniIconsBlue({ fg = "#58a6ff" }),
    MiniIconsOrange({ fg = "#f0883e" }),
    NormalSB({ bg = "#04070d", fg = "#e6edf3" }),
    MiniIconsRed({ fg = "#ff7b72" }),
    MiniIconsYellow({ fg = "#e3b341" }),
    MiniIconsGrey({ fg = "#e6edf3" }),
    MiniIconsAzure({ fg = "#79c0ff" }),
    MiniHipatternsTodo({ bg = "#7d8590", fg = "#04070d", gui = "bold" }),
    MiniHipatternsNote({ bg = "#2f81f7", fg = "#04070d", gui = "bold" }),
    MiniHipatternsHack({ bg = "#d29922", fg = "#04070d", gui = "bold" }),
    MiniHipatternsFixme({ bg = "#f85149", fg = "#04070d", gui = "bold" }),
    MiniIconsCyan({ fg = "#76e3ea" }),

    DiagnosticUnderlineHint({
      gui = undercurl,
      sp = palette.hint_undercurl,
      fg = palette.hint_undercurl,
    }),
    DiagnosticUnderlineInfo({
      gui = undercurl,
      sp = palette.info_undercurl,
      fg = palette.hint_undercurl,
    }),
    DiagnosticUnderlineWarn({
      gui = undercurl,
      sp = palette.warn_undercurl,
      fg = palette.hint_undercurl,
    }),
    DiagnosticUnderlineError({
      gui = undercurl,
      sp = palette.error_undercurl,
      fg = palette.hint_undercurl,
    }),

    MatchParen({ bg = "#1e4273", fg = "#e6edf3", gui = "bold" }),
    Function({ fg = "#C7FFB8" }),
    Identifier({ fg = "#ffffff" }),
    Operator({ fg = text.fg }),
    Todo({ bg = "#2f81f7", fg = "#0d1117" }),
    String({ fg = "#FFFCD7" }),
    Comment({ fg = "#7AE755", gui = "nocombine" }),
    LspSignatureActiveParameter({ Normal }),
    SnacksPickerGitStatusModified({ fg = "#80CBC4" }),
    LspReferenceWrite({ bg = "#17335a" }),
    LspReferenceText({ bg = "#17335a" }),
    LspReferenceRead({ bg = "#17335a" }),
    LspInlayHint({ bg = "#171b22", fg = "#8b949e" }),
    LspCodeLensSeparator({ fg = "#6e7681" }),
    LspCodeLens({ fg = "#8b949e" }),
    Cursor({ bg = "#e6edf3", fg = "#0d1117" }),
    WinBarNC({ bg = "#0d1117", fg = "#6e7681", gui = "bold" }),
    WinBar({ bg = "#0d1117", fg = "#6e7681", gui = "bold" }),
    FloatBorder(border),
    NormalFloat({ fg = "#ffffff" }),
    NormalNC({ fg = "#e6edf3" }),
    Whitespace({ fg = "#484f58" }),
    ColorColumn({ bg = "#171b22" }),
    CursorLine({ bg = "#374045" }),
    TabLineSel({ fg = "#0d1117" }),
    TabLine({ fg = "#7d8590" }),
    PmenuThumb({ bg = "#17335a" }),
    PmenuSel({ bg = "#1c3d6a" }),
    Pmenu({ fg = "white" }),
    SpellLocal({ gui = undercurl, sp = "#2f81f7" }),
    SpellRare({ gui = undercurl, sp = "#2f81f7" }),
    SpellCap({ gui = undercurl, sp = "#d29922" }),
    SpellBad({ gui = undercurl, sp = "#f85149" }),
    Conceal({ fg = "#8b949e" }),
    SignColumn({ fg = "#6e7681" }),
    FoldColumn({ fg = "#6e7681" }),
    Folded({ bg = "#1e222a", fg = "#6e7681", gui = "" }),
    WarningMsg({ fg = "#d29922" }),
    Title({ fg = palette.theme }),
    MoreMsg({ fg = "#2f8cf7", gui = "bold" }),
    ModeMsg({ fg = "#d29922", gui = "bold" }),
    ErrorMsg({ fg = "#FD9491" }),
    EndOfBuffer({ fg = "#0d1117" }),
    Directory({ fg = "#ffffff" }),
    StatusLine({ bg = "#3f76b6", fg = "#04070d" }),
    StatusLineNC({ bg = "#0d1117", fg = "#0d1117", gui = "underline", sp = "#04070d" }),
    NoiceHiddenCursor({ blend = 100, gui = "nocombine" }),

    sym("@variable")(text),
    sym("@variable.parameter")(text),
    sym("@variable.scss")({ sym("@variable.parameter") }),
    sym("@variable.parameter.vimdoc")({ fg = "#ffa657" }),
    sym("@variable.parameter.nix")({ sym("@variable.parameter") }),
    sym("@variable.parameter.builtin")(code.keyword),
    sym("@variable.member")({ Normal }),
    sym("@variable.member.nix")({ sym("@variable.member") }),
    sym("@variable.builtin")(code.keyword),
    sym("@type")(code.module),
    sym("@type.sql")({ sym("@variable") }),
    sym("@type.qualifier")({ fg = "#ff7b72" }),
    sym("@type.css")({ htmlTag }),
    sym("@type.builtin")(keyword),
    sym("@text.title")({ fg = "red" }),
    sym("@tag")({ fg = "#CCA06A" }),
    sym("@tag.builtin")({ sym("@tag") }),
    sym("@tag.attribute")({ sym("@variable.member") }),
    sym("@string")({ String }),
    sym("@string.special.url")({ fg = code.keyword.fg, gui = "underline " }),
    sym("@string.special.path.gitignore")({ fg = "#d2a8ff" }),
    sym("@string.regexp")({ fg = "#a5d6ff" }),
    sym("@string.escape")({ fg = "#a5d6ff", gui = "bold" }),
    sym("@punctuation.special")(special),
    sym("@punctuation.delimiter")({ Normal }),
    sym("@punctuation.bracket")({ fg = "#e6edf3" }),
    sym("@property")({ sym("@variable.member") }),
    sym("@property.yaml")({ Normal }),
    sym("@property.json")({ Normal }),
    sym("@operator")({ Operator }),
    sym("@number")({ Number }),
    sym("@module")(code.module),
    sym("@module.elixir")({ sym("@type") }),
    sym("@module.builtin")(code.keyword),
    sym("@markup")(special),
    sym("@markup.underline")({ gui = "underline" }),
    sym("@markup.strong")({ fg = "#e6edf3", gui = "bold" }),
    sym("@markup.strikethrough")({ fg = "#e6edf3", gui = "strikethrough" }),
    sym("@markup.raw")({ fg = "#e6edf3", gui = "italic" }),
    sym("@markup.list")(code.keyword),
    sym("@markup.list.unchecked")({ fg = "#6e7681" }),
    sym("@markup.list.checked")({ fg = "#3fb950" }),
    sym("@markup.link")({ fg = "#e6edf3", gui = "underline" }),
    sym("@markup.link.uri")({ fg = code.keyword.fg, gui = "underline " }),
    sym("@markup.link.label")(special),
    sym("@markup.italic")({ fg = "#e6edf3", gui = "italic" }),
    sym("@markup.environment")({ fg = "#ff7b72" }),
    sym("@markup.environment.name")({ fg = "#d2a8ff" }),
    sym("@lsp.typemod.variable.injected")({ sym("@variable") }),
    sym("@lsp.typemod.variable.defaultLibrary")({ sym("@variable.builtin") }),
    sym("@lsp.type.type")({ sym("@type") }),
    sym("@lsp.type.type.typescript")(code.keyword),
    sym("@lsp.type.struct")({ fg = "#FFDAAD" }),
    sym("@lsp.type.regexp")({ sym("@string.regexp") }),
    sym("@lsp.type.parameter")({ sym("@variable.parameter") }),
    sym("@lsp.type.modifier")(code.modifier),
    sym("@lsp.type.interface")({ fg = "#F2F68D" }),
    sym("@lsp.type.identifier")(code.module),
    sym("@lsp.type.event")({ sym("@type") }),
    sym("@lsp.type.enum")({ fg = "#FFDAAD" }),
    sym("@lsp.type.class")({ fg = "#FFDAAD" }),
    sym("@lsp.mod.deprecated")({ DiagnosticDeprecated }),
    sym("@label")({ sym("@tag") }),
    sym("@keyword")(code.keyword),
    sym("@keyword.function")(code.keyword),
    sym("@keyword.exception")(code.keyword),
    sym("@function")({ Function }),
    sym("@constructor")({ fg = "#ffa657" }),
    sym("@constructor.lua")({ fg = "#e6edf3" }),
    sym("@constant")({ Constant }),
    sym("@constant.html")({ sym("@tag") }),
    sym("@constant.builtin")(code.keyword),
    sym("@conceal")({ Normal }),
    sym("@comment")({ Comment }),
    sym("@comment.warning")({ bg = "#d29922", fg = "#0d1117" }),
    sym("@comment.todo")({ bg = "#7d8590", fg = "#0d1117" }),
    sym("@comment.note")({ DiagnosticInfo }),
    sym("@comment.info")({ bg = "#2f81f7", fg = "#0d1117" }),
    sym("@comment.hint")({ bg = "#7d8590", fg = "#0d1117" }),
    sym("@comment.error")({ bg = "#f85149", fg = "#0d1117" }),
    sym("@attribute")({ Constant }),
    sym("@attribute.builtin")(special),

    lualine_transitional_lualine_a_normal_to_lualine_b_normal({
      bg = "#1c2f45",
      fg = "#58a6ff",
      gui = "nocombine",
    }),
    lualine_transitional_lualine_b_normal_to_lualine_c_normal({
      bg = "#0e1219",
      fg = "#1c2f45",
      gui = "nocombine",
    }),
    lualine_transitional_lualine_b_normal_to_lualine_x_11_normal({
      bg = "#0e1219",
      fg = "#1c2f45",
      gui = "nocombine",
    }),
    lualine_transitional_lualine_a_insert_to_lualine_b_insert({
      bg = "#173322",
      fg = "#3fb950",
      gui = "nocombine",
    }),
    lualine_transitional_lualine_b_insert_to_lualine_c_insert({
      bg = "#0e1318",
      fg = "#173322",
      gui = "nocombine",
    }),
    lualine_transitional_lualine_b_insert_to_lualine_x_11_insert({
      bg = "#0e1318",
      fg = "#173322",
      gui = "nocombine",
    }),
    lualine_c_filetype_MiniIconsAzure_normal({ bg = "#0e1219", fg = "#79c0ff", gui = "nocombine" }),
    lualine_c_filetype_MiniIconsAzure_insert({ bg = "#0e1318", fg = "#79c0ff", gui = "nocombine" }),
    lualine_c_filetype_MiniIconsAzure_visual({ bg = "#0f1217", fg = "#79c0ff", gui = "nocombine" }),
    lualine_c_filetype_MiniIconsAzure_replace({
      bg = "#0f1218",
      fg = "#79c0ff",
      gui = "nocombine",
    }),
    lualine_c_filetype_MiniIconsAzure_command({
      bg = "#0f1319",
      fg = "#79c0ff",
      gui = "nocombine",
    }),
    lualine_c_filetype_MiniIconsAzure_terminal({
      bg = "#0f1217",
      fg = "#79c0ff",
      gui = "nocombine",
    }),
    lualine_c_filetype_MiniIconsAzure_inactive({
      bg = "#04070d",
      fg = "#79c0ff",
      gui = "nocombine",
    }),
    lualine_c_16_LV_Bold_normal({ bg = "#0e1219", fg = "#3a6aa2", gui = "bold,nocombine" }),
    lualine_c_16_LV_Bold_insert({ bg = "#0e1318", fg = "#2b7639", gui = "bold,nocombine" }),
    lualine_c_16_LV_Bold_visual({ bg = "#0f1217", fg = "#83631e", gui = "bold,nocombine" }),
    lualine_c_16_LV_Bold_replace({ bg = "#0f1218", fg = "#9e514e", gui = "bold,nocombine" }),
    lualine_c_16_LV_Bold_command({ bg = "#0f1319", fg = "#836ca2", gui = "bold,nocombine" }),
    lualine_c_16_LV_Bold_terminal({ bg = "#0f1217", fg = "#95582e", gui = "bold,nocombine" }),
    lualine_c_16_LV_Bold_inactive({ bg = "#04070d", fg = "#4e5359", gui = "bold,nocombine" }),
    lualine_transitional_lualine_b_normal_to_lualine_c_13_normal({
      bg = "#0e1219",
      fg = "#1c2f45",
      gui = "nocombine",
    }),
    lualine_transitional_lualine_b_normal_to_lualine_c_filetype_MiniIconsAzure_normal({
      bg = "#0e1219",
      fg = "#1c2f45",
      gui = "nocombine",
    }),
    lualine_transitional_lualine_a_command_to_lualine_b_command({
      bg = "#342f45",
      fg = "#d2a8ff",
      gui = "nocombine",
    }),
    lualine_transitional_lualine_b_command_to_lualine_c_filetype_MiniIconsAzure_command({
      bg = "#0f1319",
      fg = "#342f45",
      gui = "nocombine",
    }),
    lualine_transitional_lualine_b_command_to_lualine_x_11_command({
      bg = "#0f1319",
      fg = "#342f45",
      gui = "nocombine",
    }),
    lualine_c_16_LV_MatchParen_normal({ bg = "#0e1219", fg = "#e6edf3", gui = "bold,nocombine" }),
    lualine_c_16_LV_MatchParen_insert({ bg = "#0e1318", fg = "#e6edf3", gui = "bold,nocombine" }),
    lualine_c_16_LV_MatchParen_visual({ bg = "#0f1217", fg = "#e6edf3", gui = "bold,nocombine" }),
    lualine_c_16_LV_MatchParen_replace({ bg = "#0f1218", fg = "#e6edf3", gui = "bold,nocombine" }),
    lualine_c_16_LV_MatchParen_command({ bg = "#0f1319", fg = "#e6edf3", gui = "bold,nocombine" }),
    lualine_c_16_LV_MatchParen_terminal({ bg = "#0f1217", fg = "#e6edf3", gui = "bold,nocombine" }),
    lualine_transitional_lualine_b_normal_to_lualine_c_diagnostics_error_normal({
      bg = "#0e1219",
      fg = "#1c2f45",
      gui = "nocombine",
    }),
    BlinkCmpDoc({ NormalFloat }),
    BlinkCmpSignatureHelp({ NormalFloat }),
    BlinkCmpDocBorder(border),
    BlinkCmpDocCursorLine({ Visual }),
    BlinkCmpDocSeparator(border),
    BlinkCmpGhostText({ NonText }),
    BlinkCmpMenu({ Pmenu }),
    BlinkCmpMenuBorder(border),
    BlinkCmpMenuSelection({ PmenuSel }),
    BlinkCmpScrollBarThumb({ PmenuThumb }),
    BlinkCmpSignatureHelpActiveParameter({ LspSignatureActiveParameter }),
    BlinkCmpSignatureHelpBorder(border),
    Bold({ gui = "bold" }),
    Boolean({ Number }),
    Character({ String }),
    CmpItemKindClass({ Type }),
    CmpItemKindConstructor({ sym("@constructor") }),
    CmpItemKindEnum({ Constant }),
    CmpItemKindEnumMember({ sym("@variable.member") }),
    CmpItemKindEvent({ Constant }),
    CmpItemKindField({ sym("@variable.member") }),
    CmpItemKindFunction({ Function }),
    CmpItemKindInterface({ Constant }),
    CmpItemKindKeyword(keyword),
    CmpItemKindMethod({ Function }),
    CmpItemKindModule({ sym("@module") }),
    CmpItemKindOperator({ Operator }),
    CmpItemKindReference(keyword),
    CmpItemKindStruct({ Type }),
    CmpItemKindTypeParameter({ sym("@variable.member") }),
    CmpItemKindUnit({ Constant }),
    CmpItemKindValue(keyword),
    CmpItemKindVariable({ sym("@variable") }),
    CmpItemMenu({ Comment }),
    CocExplorerNormalFloat({ NormalSB }),
    cssMedia(keyword),
    cssProp({ Constant }),
    cssPseudoClassId({ Function }),
    CurSearch({ IncSearch }),
    CursorColumn({ CursorLine }),
    CursorIM({ Cursor }),
    CursorLineFold({ FoldColumn }),
    CursorLineSign({ SignColumn }),
    DapUIBreakpointsCurrentLine({ DapUIThread }),
    DapUIBreakpointsInfo({ DapUIWatchesValue }),
    DapUIBreakpointsPath({ DapUIScope }),
    DapUIDecoration({ DapUIScope }),
    DapUIFloatBorder(border),
    DapUILineNumber({ DapUIScope }),
    DapUIPlayPause({ DapUIWatchesValue }),
    DapUIRestart({ DapUIWatchesValue }),
    DapUISource({ DapUIType }),
    DapUIStepBack({ DapUIScope }),
    DapUIStepInto({ DapUIScope }),
    DapUIStepOut({ DapUIScope }),
    DapUIStepOver({ DapUIScope }),
    DapUIStop({ DapUIWatchesEmpty }),
    DapUIStoppedThread({ DapUIScope }),
    DapUIUnavailable({ DapUIBreakpointsDisabledLine }),
    DapUIWatchesError({ DapUIWatchesEmpty }),
    DapUIWinSelect({ DapUIModifiedValue }),
    DashboardCenter({ String }),
    DashboardHeader({ Title }),
    DashboardShortCut({ Identifier }),
    Debug(special),
    Define({ PreProc }),
    Delimiter({ Normal }),
    DiagnosticFloatingError({ DiagnosticError }),
    DiagnosticOk({ fg = "nvimlightgreen" }),
    DiagnosticFloatingHint({ DiagnosticHint }),
    DiagnosticFloatingInfo({ DiagnosticInfo }),
    DiagnosticFloatingOk({ DiagnosticOk }),
    DiagnosticFloatingWarn({ fg = DiagnosticWarn.fg }),
    DiagnosticSignError({ fg = DiagnosticError.fg }),
    DiagnosticSignHint({ DiagnosticHint }),
    DiagnosticSignInfo({ DiagnosticInfo }),
    DiagnosticSignOk({ DiagnosticOk }),
    DiagnosticSignWarn({ fg = DiagnosticWarn.fg }),
    DiagnosticUnderlineOk({ gui = "underline", sp = "nvimlightgreen" }),
    DiagnosticUnnecessary({ NonText }),
    DiagnosticVirtualLinesError({ fg = DiagnosticError.fg }),
    DiagnosticVirtualLinesHint({ DiagnosticHint }),
    DiagnosticVirtualLinesInfo({ DiagnosticInfo }),
    DiagnosticVirtualLinesOk({ DiagnosticOk }),
    DiagnosticVirtualLinesWarn({ fg = DiagnosticWarn.fg }),
    DiagnosticVirtualTextError({ DiagnosticError }),
    DiagnosticVirtualTextInfo({ DiagnosticInfo }),
    DiagnosticVirtualTextOk({ DiagnosticOk }),
    DiagnosticVirtualTextWarn({ fg = DiagnosticWarn.fg }),
    Exception(keyword),
    FidgetTask({ LineNr }),
    FidgetTitle({ Title }),
    Float({ Number }),
    FloatShadow({ bg = "nvimdarkgrey4", blend = 80 }),
    FloatShadowThrough({ bg = "nvimdarkgrey4", blend = 100 }),
    FloatTitle({ Title }),
    FzfLuaBorder(border),
    FzfLuaCursor({ Cursor }),
    FzfLuaCursorLine({ CursorLine }),
    FzfLuaCursorLineNr({ CursorLineNr }),
    FzfLuaNormal({ Normal }),
    FzfLuaScrollFloatFull({ PmenuThumb }),
    FzfLuaSearch({ IncSearch }),
    FzfLuaTitle({ Title }),
    Ignore({ Normal }),
    Include({ PreProc }),
    Italic({ gui = "italic" }),
    jsonNull({ Constant }),
    Label({ Conditional }),
    lCursor({ Cursor }),
    lessAmpersand({ Function }),
    lessClass({ Function }),
    lessClassCall({ Function }),
    lessCssAttribute({ Constant }),
    lessFunction({ Constant }),
    LspReferenceTarget({ LspReferenceText }),
    Macro({ PreProc }),
    MiniAnimateCursor({ gui = "reverse,nocombine" }),
    MiniAnimateNormalFloat({ NormalFloat }),
    MiniClueBorder(border),
    MiniClueDescSingle({ NormalFloat }),
    MiniCompletionActiveParameter({ gui = "underline" }),
    MiniDepsHint({ DiagnosticHint }),
    MiniDepsInfo({ DiagnosticInfo }),
    MiniDepsMsgBreaking({ fg = DiagnosticWarn.fg }),
    MiniDepsPlaceholder({ Comment }),
    MiniDepsTitle({ Title }),
    MiniDepsTitleSame({ DiffText }),
    MiniFilesBorder(border),
    MiniFilesCursorLine({ CursorLine }),
    MiniFilesDirectory({ Directory }),
    MiniFilesNormal({ NormalFloat }),
    MiniIndentscopePrefix({ gui = "nocombine" }),
    MiniJump({ SpellRare }),
    MiniJump2dDim({ Comment }),
    MiniMapNormal({ NormalFloat }),
    MiniMapSymbolCount(special),
    MiniNotifyBorder(border),
    MiniNotifyNormal({ NormalFloat }),
    MiniOperatorsExchangeFrom({ IncSearch }),
    MiniPickBorder(border),
    MiniPickIconDirectory({ Directory }),
    MiniPickMatchCurrent({ CursorLine }),
    MiniPickMatchMarked({ Visual }),
    MiniPickNormal({ NormalFloat }),
    MiniPickPreviewLine({ CursorLine }),
    MiniPickPreviewRegion({ IncSearch }),
    MiniStarterCurrent({ gui = "nocombine" }),
    MiniStarterInactive({ Comment }),
    MiniStarterItem({ Normal }),
    MiniStarterSection(special),
    MiniSurround({ IncSearch }),
    MiniTablineFill({ TabLineFill }),
    MiniTestEmphasis({ gui = "bold" }),
    MsgSeparator({ StatusLine }),
    NeoTreeDimText({ Conceal }),
    NeoTreeNormal({ NormalSB }),
    NoiceCmdlinePopup({ Normal }),
    NoiceCmdlinePrompt({ Title }),
    NoiceCompletionItemKindDefault(special),
    NoiceConfirm({ Normal }),
    NoiceCursor({ Cursor }),
    NoiceFormatConfirm({ CursorLine }),
    NoiceFormatConfirmDefault({ Visual }),
    NoiceFormatDate(special),
    NoiceFormatEvent({ NonText }),
    NoiceFormatKind({ NonText }),
    NoiceFormatLevelDebug({ NonText }),
    NoiceFormatLevelError({ DiagnosticVirtualTextError }),
    NoiceFormatLevelInfo({ DiagnosticVirtualTextInfo }),
    NoiceFormatLevelOff({ NonText }),
    NoiceFormatLevelTrace({ NonText }),
    NoiceFormatLevelWarn({ DiagnosticVirtualTextWarn }),
    NoiceFormatProgressTodo({ CursorLine }),
    NoiceFormatTitle({ Title }),
    NoiceLspProgressClient({ Title }),
    NoiceLspProgressSpinner({ Constant }),
    NoiceLspProgressTitle({ NonText }),
    NoicePopup({ NormalFloat }),
    NoicePopupBorder(border),
    NoicePopupmenu({ Pmenu }),
    NoicePopupmenuBorder(border),
    NoicePopupmenuMatch(special),
    NoicePopupmenuSelected({ PmenuSel }),
    NoiceScrollbarThumb({ PmenuThumb }),
    NoiceSplit({ NormalFloat }),
    NoiceSplitBorder(border),
    NoiceVirtualText({ DiagnosticVirtualTextInfo }),
    NotifyDEBUGBody({ NotifyDEBUGTitle }),
    NotifyDEBUGBorder(border),
    NotifyDEBUGIcon({ NotifyDEBUGTitle }),
    NotifyERRORBody({ NotifyERRORTitle }),
    NotifyERRORBorder(border),
    NotifyERRORIcon({ NotifyERRORTitle }),
    NotifyINFOBody({ NotifyINFOTitle }),
    NotifyINFOBorder(border),
    NotifyINFOIcon({ NotifyINFOTitle }),
    NotifyTRACEBody({ NotifyTRACETitle }),
    NotifyTRACEBorder(border),
    NotifyTRACEIcon({ NotifyTRACETitle }),
    NotifyWARNBody({ NotifyWARNTitle }),
    NotifyWARNBorder(border),
    NotifyWARNIcon({ NotifyWARNTitle }),
    NvimAssignment({ Operator }),
    NvimInternalError({ bg = "red", fg = "red" }),
    NvimFigureBrace({ NvimInternalError }),
    NvimIdentifier({ Identifier }),
    NvimInvalid({ Error }),
    NvimInvalidSingleQuotedUnknownEscape({ NvimInternalError }),
    NvimInvalidSpacing({ ErrorMsg }),
    NvimNumber({ Number }),
    NvimNumberPrefix({ Type }),
    NvimOperator({ Operator }),
    NvimOptionSigil({ Type }),
    NvimSingleQuotedUnknownEscape({ NvimInternalError }),
    NvimSpacing({ Normal }),
    NvimString({ String }),
    NvimTreeNormal({ NormalSB }),
    PmenuExtra({ Pmenu }),
    PmenuExtraSel({ PmenuSel }),
    PmenuKind({ Pmenu }),
    PmenuKindSel({ PmenuSel }),
    PmenuMatch({ gui = "bold" }),
    PmenuMatchSel({ gui = "bold" }),
    PmenuSbar({ Pmenu }),
    PreCondit({ PreProc }),
    qfFileName({ Directory }),
    qfLineNr({ LineNr }),
    Question({ MoreMsg }),
    QuickFixLine({ CursorLine }),
    RedrawDebugClear({ bg = "nvimdarkyellow" }),
    RedrawDebugComposed({ bg = "nvimdarkgreen" }),
    RedrawDebugNormal({ gui = "reverse" }),
    RedrawDebugRecompose({ bg = "nvimdarkred" }),
    Repeat({ Conditional }),
    SignColumnSB({ SignColumn }),
    SnacksDashboardDesc({ fg = palette.theme, gui = "bold" }),
    SnacksDashboardDir({ NonText }),
    SnacksDashboardFile(special),
    SnacksDashboardFooter({ Title }),
    SnacksDashboardHeader({ fg = special.fg, gui = "bold" }),
    SnacksDashboardIcon({ fg = palette.theme, gui = "bold" }),
    SnacksDashboardKey({ fg = palette.theme, gui = "bold" }),
    SnacksDashboardNormal({ Normal }),
    SnacksDashboardSpecial(special),
    SnacksDashboardTitle(special),
    SnacksIndent({ fg = palette.text_sub2 }),
    SnacksIndent1({ DiagnosticInfo }),
    SnacksIndent2({ DiagnosticHint }),
    SnacksIndent3({ fg = DiagnosticWarn.fg }),
    SnacksIndent4({ fg = DiagnosticError.fg }),
    SnacksIndent5({ DiagnosticInfo }),
    SnacksIndent6({ DiagnosticHint }),
    SnacksIndent7({ fg = DiagnosticWarn.fg }),
    SnacksIndent8({ fg = DiagnosticError.fg }),
    SnacksIndentScope({ fg = "#a584b3", gui = "bold" }),
    SnacksInputBorder(border),
    SnacksInputIcon({ DiagnosticHint }),
    SnacksInputNormal({ Normal }),
    SnacksInputTitle({ DiagnosticInfo }),
    SnacksNormal({ fg = NormalFloat.fg }),
    SnacksNormalNC({ fg = NormalFloat.fg }),
    SnacksNotifierBorderDebug({ NonText }),
    SnacksNotifierBorderError({ fg = DiagnosticError.fg }),
    SnacksNotifierBorderInfo({ DiagnosticInfo }),
    SnacksNotifierBorderTrace({ NonText }),
    SnacksNotifierBorderWarn({ fg = DiagnosticWarn.fg }),
    SnacksNotifierDebug({ Normal }),
    SnacksNotifierError({ Normal }),
    SnacksNotifierFooterDebug({ NonText }),
    SnacksNotifierFooterError({ fg = DiagnosticError.fg }),
    SnacksNotifierFooterInfo({ DiagnosticInfo }),
    SnacksNotifierFooterTrace({ NonText }),
    SnacksNotifierFooterWarn({ fg = DiagnosticWarn.fg }),
    SnacksNotifierHistory({ Normal }),
    SnacksNotifierHistoryDateTime(special),
    SnacksNotifierHistoryTitle({ Title }),
    SnacksNotifierIconDebug({ NonText }),
    SnacksNotifierIconTrace({ NonText }),
    SnacksNotifierInfo({ Normal }),
    SnacksNotifierMinimal({ NormalFloat }),
    SnacksNotifierTitleDebug({ NonText }),
    SnacksNotifierTitleError({ fg = DiagnosticError.fg }),
    SnacksNotifierTitleInfo({ DiagnosticInfo }),
    SnacksNotifierTitleTrace({ NonText }),
    SnacksNotifierTitleWarn({ fg = DiagnosticWarn.fg }),
    SnacksNotifierTrace({ Normal }),
    SnacksNotifierWarn({ Normal }),
    SnacksPicker({ fg = NormalFloat.fg }),
    SnacksPickerAuEvent({ Constant }),
    SnacksPickerAuGroup({ Type }),
    SnacksPickerAuPattern({ String }),
    SnacksPickerBold({ Bold }),
    SnacksPickerBorder(border),
    SnacksPickerBufFlags({ NonText }),
    SnacksPickerBufNr({ Number }),
    SnacksPickerCmd({ Function }),
    SnacksPickerCmdBuiltin({ sym("@constructor") }),
    SnacksPickerCol({ LineNr }),
    SnacksPickerComment({ Comment }),
    SnacksPickerDesc({ Comment }),
    SnacksPickerDiagnosticCode(special),
    SnacksPickerDiagnosticSource({ Comment }),
    SnacksPickerDimmed({ Conceal }),
    SnacksPickerDir({ NonText }),
    SnacksPickerDirectory({ Directory }),
    SnacksPickerIcon(special),
    SnacksPickerIconArray({ sym("@punctuation.bracket") }),
    SnacksPickerIconCategory({ sym("@module") }),
    SnacksPickerIconClass({ sym("@type") }),
    SnacksPickerIconConstructor({ sym("@constructor") }),
    SnacksPickerIconEvent(special),
    SnacksPickerIconField({ sym("@variable.member") }),
    SnacksPickerIconFile({ Normal }),
    SnacksPickerIconModule({ sym("@module") }),
    SnacksPickerIconNamespace({ sym("@module") }),
    SnacksPickerIconNull({ sym("@constant.builtin") }),
    SnacksPickerIconPackage({ sym("@module") }),
    SnacksPickerIconVariable({ sym("@variable") }),
    SnacksPickerIdx({ Number }),
    SnacksPickerItalic({ Italic }),
    SnacksPickerKeymapLhs(special),
    SnacksPickerKeymapMode({ Number }),
    SnacksPickerKeymapNowait({ sym("@variable.builtin") }),
    SnacksPickerKeymapRhs({ NonText }),
    SnacksPickerLink({ Comment }),
    SnacksPickerLinkBroken({ fg = DiagnosticError.fg }),
    SnacksPickerCursorLine({ CursorLine }),
    SnacksPickerListCursorLine({ CursorLine }),
    SnacksPickerPreviewCursorLine({ CursorLine }),
    SnacksPickerLspAttached({ fg = DiagnosticWarn.fg }),
    SnacksPickerLspAttachedBuf({ DiagnosticInfo }),
    SnacksPickerLspDisabled({ fg = DiagnosticWarn.fg }),
    SnacksPickerLspEnabled(special),
    SnacksPickerLspUnavailable({ fg = DiagnosticError.fg }),
    SnacksPickerManPage(special),
    SnacksPickerManSection({ Number }),
    SnacksPickerMatch(special),
    SnacksPickerPathHidden({ Normal }),
    SnacksPickerPathIgnored(vcs.ignored.label),
    SnacksPickerPickWin({ Search }),
    SnacksPickerPrompt(special),
    SnacksPickerRegister({ Number }),
    SnacksPickerRow({ String }),
    SnacksPickerSearch({ Search }),
    SnacksPickerSelected({ Number }),
    SnacksPickerSpecial(special),
    SnacksPickerSpinner(special),
    SnacksPickerTime(special),
    SnacksPickerToggle({ DiagnosticVirtualTextInfo }),
    SnacksPickerTotals({ NonText }),
    SnacksPickerTree({ LineNr }),
    SnacksPickerUndoAdded({ Added }),
    SnacksPickerUndoCurrent({ sym("@variable.builtin") }),
    SnacksPickerUndoRemoved({ Removed }),
    SnacksPickerUndoSaved(special),
    SnacksPickerUnselected({ NonText }),
    SnacksStatusColumnMark({ DiagnosticHint }),
    SnacksWinBar({ Title }),
    SnacksWinKey(keyword),
    SnacksWinKeyDesc({ Function }),
    SnacksWinKeySep({ NonText }),
    SnippetTabstop({}),
    SpecialChar(special),
    SpecialComment(special),
    SpecialKey({ NonText }),
    StatusLineTerm({ StatusLine }),
    StatusLineTermNC({ StatusLineNC }),
    StorageClass({ Type }),
    Structure({ Type }),

    Tag(special),
    TelescopeMatching({ Search }),
    TelescopeSelection({ CursorLine }),
    TelescopeSelectionCaret({ fg = "#2f81f7" }),
    TinyInlineInvDiagnosticVirtualTextError({ Visual }),
    TinyInlineInvDiagnosticVirtualTextHint({ Visual }),
    TinyInlineInvDiagnosticVirtualTextInfo({ Visual }),
    TinyInlineInvDiagnosticVirtualTextWarn({ Visual }),
    TroubleCode(special),
    TroubleCount({ TabLineSel }),
    TroubleDiagnosticsCode({ Comment }),
    TroubleDiagnosticsItemSource({ Comment }),
    TroubleDirectory({ Directory }),
    TroubleFilename({ Directory }),
    TroubleIconArray({ sym("@punctuation.bracket") }),
    TroubleIconClass({ sym("@type") }),
    TroubleIconConstructor({ sym("@constructor") }),
    TroubleIconDirectory(special),
    TroubleIconEvent(special),
    TroubleIconField({ sym("@variable.member") }),
    TroubleIconFile({ Normal }),
    TroubleIconModule({ sym("@module") }),
    TroubleIconNamespace({ sym("@module") }),
    TroubleIconNull({ sym("@constant.builtin") }),
    TroubleIconPackage({ sym("@module") }),
    TroubleIconVariable({ sym("@variable") }),
    TroubleIndent({ LineNr }),
    TroubleIndentFoldClosed({ CursorLineNr }),
    TroubleNormal({ NormalFloat }),
    TroubleNormalNC({ NormalFloat }),
    TroublePos({ LineNr }),
    TroublePreview({ Visual }),
    TroubleSource({ Comment }),
    TroubleText({ Normal }),
    Typedef({ Type }),
    Underlined({ gui = "underline" }),
    VisualNOS({ Visual }),
    WhichKey({ Identifier }),
    WhichKeyBorder(border),
    WhichKeyDesc(keyword),
    WhichKeyGroup({ Function }),
    WhichKeyIcon({ sym("@markup.link") }),
    WhichKeyIconAzure({ MiniIconsAzure }),
    WhichKeyIconBlue({ MiniIconsBlue }),
    WhichKeyIconCyan({ MiniIconsCyan }),
    WhichKeyIconGreen({ MiniIconsGreen }),
    WhichKeyIconGrey({ MiniIconsGrey }),
    WhichKeyIconOrange({ MiniIconsOrange }),
    WhichKeyIconPurple({ MiniIconsPurple }),
    WhichKeyIconRed({ MiniIconsRed }),
    WhichKeyIconYellow({ MiniIconsYellow }),
    WhichKeyNormal({ fg = NormalFloat.fg }),
    WhichKeySeparator({ Comment }),
    WhichKeySeperator({ Comment }),
    WhichKeyValue({ Comment }),
    WildMenu({ Pmenu }),
    xmlAttrib({ htmlTag }),
    xmlTagName({ htmlTag }),

    BufferLineTabSeparator({ fg = "red" }),
    BufferLineTabSeparatorSelected({ fg = "red", gui = "bold" }),
    BufferLineSeparator({ NonText }),
    BufferLineOffsetSeparator({ fg = "red" }),
    BufferLineGroupSeparator({ fg = "red" }),
    BufferLineIndicatorSelected({ fg = palette.theme, gui = "bold" }),
    BufferLineIndicatorVisible({ fg = "white" }),
    BufferLineBackground({ NonText }),
    BufferLineDuplicate({ fg = text_sub.fg }),
    BufferLineDuplicateSelected({ fg = text.fg, gui = "bold" }),
    BufferLineDuplicateVisible({ fg = text_sub.fg }),
    BufferLineFill({ fg = text_sub.fg }),
    BufferLineGroupLabel({ fg = text_sub.fg }),
    BufferLineInfo({ fg = text_sub.fg }),
    BufferLineInfoSelected({ fg = text.fg, gui = "bold" }),
    BufferLineInfoVisible({ fg = text_sub.fg }),

    BufferLineModified(vcs.modified.label),
    BufferLineModifiedSelected({ fg = vcs.modified.label.fg, gui = "bold" }),
    BufferLineModifiedVisible({ BufferLineModified }),

    BufferLineTab({ fg = text_sub.fg }),
    BufferLineTabClose({ fg = text_sub.fg }),
    BufferLineTabSelected({ fg = text.fg, gui = "bold" }),

    BufferLineTruncMarker({ fg = text_sub.fg }),

    BufferLineBuffer({ fg = text_sub.fg }),
    BufferLineBufferSelected({ fg = text.fg, gui = "bold" }),
    BufferLineBufferVisible({ fg = text_sub.fg }),

    BufferLineError({ fg = text_sub.fg, gui = undercurl, sp = palette.error_undercurl }),
    BufferLineErrorVisible({ BufferLineError }),
    BufferLineErrorSelected({ fg = text.fg, gui = "bold,undercurl", sp = palette.error_undercurl }),

    BufferLineWarning({ fg = text_sub.fg, gui = undercurl, sp = palette.warn_uvimndercurl }),
    BufferLineWarningVisible({ BufferLineWarning }),
    BufferLineWarningSelected({ fg = text.fg, gui = "bold,undercurl", sp = palette.warn_undercurl }),

    BufferLineHint({ fg = text_sub.fg }),
    BufferLineHintVisible({ BufferLineHint }),
    BufferLineHintSelected({ fg = text.fg, gui = "bold" }),

    BufferLineNumbers({ fg = text_sub.fg }),
    BufferLineNumbersVisible({ BufferLineNumbers }),
    BufferLineNumbersSelected({ fg = text.fg, gui = "bold" }),

    BufferLinePick({ fg = text_sub.fg }),
    BufferLinePickVisible({ BufferLinePick }),
    BufferLinePickSelected({ fg = text.fg, gui = "bold" }),

    -- buffer line diagnostic
    BufferLineDiagnostic({ fg = text_sub.fg }),
    BufferLineDiagnosticSelected({ fg = text.fg, gui = "bold" }),
    BufferLineDiagnosticVisible({ fg = text_sub.fg }),

    BufferLineErrorDiagnostic({
      fg = palette.error_label,
      gui = "",
    }),
    BufferLineErrorDiagnosticSelected({
      BufferLineErrorDiagnostic,
    }),
    BufferLineErrorDiagnosticVisible({
      BufferLineErrorDiagnostic,
    }),

    BufferLineWarningDiagnostic({ fg = palette.warn_label }),
    BufferLineWarningDiagnosticSelected({ BufferLineWarningDiagnostic }),
    BufferLineWarningDiagnosticVisible({ BufferLineWarningDiagnostic }),

    BufferLineInfoDiagnostic({ fg = palette.info_label }),
    BufferLineInfoDiagnosticSelected({ BufferLineInfoDiagnostic }),
    BufferLineInfoDiagnosticVisible({ BufferLineInfoDiagnostic }),

    BufferLineHintDiagnostic({ fg = palette.hint_label }),
    BufferLineHintDiagnosticSelected({ BufferLineHintDiagnostic }),
    BufferLineHintDiagnosticVisible({ BufferLineHintDiagnostic }),

    -- BufferLineCloseButton({ fg = text_sub.fg }),
    -- BufferLineCloseButtonSelected({ fg = text.fg, gui = "bold" }),
    -- BufferLineCloseButtonVisible({ fg = text_sub.fg }),
    -- BufferLineMiniIconsAzure({ fg = text_sub.fg }),
    -- BufferLineMiniIconsAzureInactive({ fg = text_sub.fg }),
    -- BufferLineMiniIconsAzureSelected({ fg = text.fg }),
    GitSignsAdd(vcs.added.label),
    GitSignsChange(vcs.modified.label),
    GitSignsDelete(vcs.deleted.label),
    GitSignsStagedAdd(vcs.added.label),
    GitSignsStagedAddCul(vcs.added.label),
    GitSignsStagedAddLn(vcs.added.label),
    GitSignsStagedAddNr(vcs.added.label),
    GitSignsStagedChange(vcs.modified.label),
    GitSignsStagedChangeCul(vcs.modified.label),
    GitSignsStagedChangedelete(vcs.modified.label),
    GitSignsStagedChangedeleteCul(vcs.modified.label),
    GitSignsStagedChangedeleteLn(vcs.modified.label),
    GitSignsStagedChangedeleteNr(vcs.modified.label),
    GitSignsStagedChangeLn(vcs.modified.label),
    GitSignsStagedChangeNr(vcs.modified.label),
    GitSignsStagedDelete(vcs.deleted.label),
    GitSignsStagedDeleteCul(vcs.deleted.label),
    GitSignsStagedDeleteNr(vcs.deleted.label),
    GitSignsStagedTopdelete(vcs.deleted.label),
    GitSignsStagedTopdeleteCul(vcs.deleted.label),
    GitSignsStagedTopdeleteNr(vcs.deleted.label),
    GitSignsStagedUntracked(vcs.deleted.label),
    GitSignsStagedUntrackedCul(vcs.deleted.label),
    GitSignsStagedUntrackedLn(vcs.deleted.label),
    GitSignsStagedUntrackedNr(vcs.deleted.label),
    GitSignsAddCul({ GitSignsAdd }),
    GitSignsAddInline({ TermCursor }),
    GitSignsAddNr({ GitSignsAdd }),
    GitSignsChangeCul({ GitSignsChange }),
    GitSignsChangedelete({ GitSignsChange }),
    GitSignsChangeInline({ TermCursor }),
    GitSignsChangeNr({ GitSignsChange }),
    GitSignsCurrentLineBlame({ NonText }),
    GitSignsDeleteCul({ GitSignsDelete }),
    GitSignsDeleteInline({ TermCursor }),
    GitSignsDeleteNr({ GitSignsDelete }),
    GitSignsTopdelete({ GitSignsDelete }),
    GitSignsUntracked({ GitSignsAdd }),

    SnacksPickerGitBranch(vcs.deleted.label),
    SnacksPickerGitBranchCurrent({ Number }),
    SnacksPickerGitBreaking({ Error }),
    SnacksPickerGitCommit({ sym("@variable.builtin") }),
    SnacksPickerGitDate(special),
    SnacksPickerGitDetached({ fg = DiagnosticWarn.fg }),
    SnacksPickerGitIssue({ Number }),
    SnacksPickerGitScope({ Italic }),
    SnacksPickerGitStatus(special),
    SnacksPickerGitStatusAdded(vcs.added.label),
    SnacksPickerGitStatusDeleted(vcs.deleted.label),
    SnacksPickerGitStatusIgnored(vcs.ignored.label),
    SnacksPickerGitStatusStaged(vcs.modified.label),
    SnacksPickerGitStatusUnmerged({ fg = DiagnosticError.fg }),
    SnacksPickerGitStatusUntracked(vcs.untracked.label),
    SnacksPickerGitType({ Title }),

    UfoFoldedEllipsis(text_sub),
    UfoCursorFoldedLine({ fg = "red" }),

    AvanteButtonPrimary({ fg = "#1e222a", bg = "#abb2bf" }),
    AvanteButtonDefaultHover({ fg = "#1e222a", bg = "#a9cf8a" }),
    AvanteButtonDefault({ fg = "#1e222a", bg = "#abb2bf" }),
    AvanteConfirmTitle({ fg = "#1e222a", bg = "#e06c75" }),
    AvanteToBeDeletedWOStrikethrough({ bg = "#562c30" }),
    AvanteToBeDeleted({ gui = "strikethrough", bg = "#ffcccc" }),
    AvanteInlineHint({ Keyword }),
    AvanteSidebarWinHorizontalSeparator({ fg = "#313131" }),
    AvanteReversedTitle({ fg = "#98c379" }),
    AvanteTitle({ fg = "#1e222a", bg = "#98c379" }),
    AvanteSuggestion({ Comment }),
    AvanteReversedThirdTitle({ fg = "#353b45" }),
    AvanteThirdTitle({ fg = "#abb2bf", bg = "#353b45" }),
    AvanteReversedSubtitle({ fg = "#56b6c2" }),
    AvanteSubtitle({ fg = "#1e222a", bg = "#56b6c2" }),
    AvanteThinking({ fg = "#c678dd" }),
    AvanteTaskCompleted({ fg = "#98c379" }),
    AvanteStateSpinnerCompacting({ Special }),
    AvanteStateSpinnerThinking({ Special }),
    AvanteStateSpinnerSearching({ Special }),
    AvanteStateSpinnerSucceeded({ fg = "#1e222a", bg = "#98c379" }),
    AvanteStateSpinnerFailed({ fg = "#1e222a", bg = "#e06c75" }),
    AvanteStateSpinnerToolCalling({ fg = "#1e222a", bg = "#56b6c2" }),
    AvanteStateSpinnerGenerating({ fg = "#1e222a", bg = "#ab9df2" }),
    AvanteReversedNormal({ bg = "#ffffff" }),
    AvanteCommentFg({ fg = "#7ae755" }),
    AvanteSidebarWinSeparator({}),
    AvanteSidebarNormal({ fg = text.fg }),
    AvantePromptInput({ fg = text.fg }),
    AvanteButtonDangerHover({ fg = "#1e222a", bg = "#e06c75" }),
    AvanteButtonDanger({ fg = "#1e222a", bg = "#abb2bf" }),
    AvantePromptInputBorder({ NormalFloat }),
    AvanteAnnotation({ Comment }),
    AvanteButtonPrimaryHover({ fg = "#1e222a", bg = "#56b6c2" }),
    AvantePopupHint({ NormalFloat }),
    AvanteConflictCurrentLabel({ bg = "#6f393e" }),
    AvanteConflictIncoming({ gui = "bold", bg = "#314753" }),
    AvanteConflictCurrent({ gui = "bold", bg = "#562c30" }),
    AvanteConflictIncomingLabel({ bg = "#3f5c6b" }),
  }
end)
return theme
