---@diagnostic disable: undefined-global
local lush = require("lush")
local hsl = lush.hsl
local hsluv = lush.hsluv

local theme = lush(function(injected_functions)
  local sym = injected_functions.sym
  return {
    Search({ bg = "#0269c9", fg = "#ffffff", gui = "bold underline" }),
    Normal({ fg = "#ffffff" }),
    TermCursor({ gui = "reverse" }),
    LineNr({ fg = "#6e7681" }),
    LineNrAbove({ LineNr }),
    LineNrBelow({ LineNr }),
    IncSearch({ bg = "red", fg = "white", gui = "bold underline" }),
    NonText({ fg = "grey" }),
    CursorLineNr({ fg = "#e6edf3" }),
    Constant({ Normal }),
    sym("@variable.member")({ Normal }),
    sym("@variable.member.nix")({ sym("@variable.member") }),
    TabLineFill({}),
    lualine_c_16_LV_MatchParen_inactive({ bg = "#04070d", fg = "#e6edf3", gui = "bold,nocombine" }),
    BufferLineMiniIconsAzureSelected({ bg = "#0d1117", fg = "#79c0ff" }),
    GitSignsStagedUntrackedCul({ fg = "#1f5c28" }),
    GitSignsStagedTopdeleteCul({ fg = "#7c2824" }),
    GitSignsStagedChangedeleteCul({ fg = "#694c11" }),
    GitSignsStagedDeleteCul({ fg = "#7c2824" }),
    GitSignsStagedChangeCul({ fg = "#694c11" }),
    GitSignsStagedAddCul({ fg = "#1f5c28" }),
    GitSignsStagedUntrackedLn({ bg = "#10231c", fg = "#1f5c28" }),
    GitSignsStagedChangedeleteLn({ bg = "#231e14", fg = "#694c11" }),
    GitSignsStagedChangeLn({ bg = "#231e14", fg = "#694c11" }),
    GitSignsStagedAddLn({ bg = "#10231c", fg = "#1f5c28" }),
    GitSignsStagedUntrackedNr({ fg = "#1f5c28" }),
    GitSignsStagedTopdeleteNr({ fg = "#7c2824" }),
    GitSignsStagedChangedeleteNr({ fg = "#694c11" }),
    GitSignsStagedDeleteNr({ fg = "#7c2824" }),
    GitSignsStagedChangeNr({ fg = "#694c11" }),
    GitSignsStagedAddNr({ fg = "#1f5c28" }),
    GitSignsStagedUntracked({ fg = "#1f5c28" }),
    GitSignsStagedTopdelete({ fg = "#7c2824" }),
    GitSignsStagedChangedelete({ fg = "#694c11" }),
    GitSignsStagedDelete({ fg = "#7c2824" }),
    GitSignsStagedChange({ fg = "#694c11" }),
    GitSignsStagedAdd({ fg = "#1f5c28" }),
    NoiceFormatProgressDone({ bg = "#3c3b33" }),
    BufferLineWarningDiagnosticVisible({ bg = "#0b0f15", fg = "#686f76" }),
    BufferLineError({ bg = "#090c11", fg = "#8b949e", sp = "#f85149" }),
    BufferLineIndicatorVisible({ bg = "#0b0f15", fg = "#0b0f15" }),
    BufferLineTruncMarker({ bg = "#07090c", fg = "#8b949e" }),
    BufferLineGroupSeparator({ bg = "#07090c", fg = "#8b949e" }),
    BufferLineSeparator({ bg = "#090c11", fg = "#07090c" }),
    BufferLineTabSelected({ fg = "#6e7681" }),
    BufferLineTabClose({ bg = "#090c11", fg = "#8b949e" }),
    BufferLineCloseButton({ bg = "#090c11", fg = "#8b949e" }),
    BufferLineModified({ bg = "#090c11", fg = "#a5d6ff" }),
    BufferLineCloseButtonSelected({ bg = "#0d1117", fg = "#e6edf3" }),
    BufferLineBuffer({ bg = "#090c11", fg = "#8b949e" }),
    BufferLineNumbersVisible({ bg = "#0b0f15", fg = "#8b949e" }),
    BufferLineFill({ bg = "#07090c", fg = "#8b949e" }),
    BufferLineHintVisible({ bg = "#0b0f15", fg = "#8b949e" }),
    BufferLineHintDiagnostic({ bg = "#090c11", fg = "#686f76", sp = "#5d636c" }),
    BufferLineHintDiagnosticVisible({ bg = "#0b0f15", fg = "#686f76" }),
    BufferLineInfoVisible({ bg = "#0b0f15", fg = "#8b949e" }),
    BufferLineInfoDiagnostic({ bg = "#090c11", fg = "#686f76", sp = "#2360b9" }),
    BufferLineInfoDiagnosticVisible({ bg = "#0b0f15", fg = "#686f76" }),
    BufferLineWarningVisible({ bg = "#0b0f15", fg = "#8b949e" }),
    BufferLineDiagnostic({ bg = "#090c11", fg = "#686f76" }),
    BufferLineErrorVisible({ bg = "#0b0f15", fg = "#8b949e" }),
    BufferLineErrorDiagnosticVisible({ bg = "#0b0f15", fg = "#686f76" }),
    BufferLineModifiedVisible({ bg = "#0b0f15", fg = "#a5d6ff" }),
    BufferLineModifiedSelected({ bg = "#0d1117", fg = "#a5d6ff" }),
    BufferLineNumbers({ bg = "#090c11", fg = "#8b949e" }),
    BufferLineDuplicate({ bg = "#090c11", fg = "#848c96", gui = "italic" }),
    BufferLineSeparatorSelected({ bg = "#0d1117", fg = "#07090c" }),
    BufferLineSeparatorVisible({ bg = "#0b0f15", fg = "#07090c" }),
    BufferLineTabSeparator({ bg = "#090c11", fg = "#07090c" }),
    BufferLineTabSeparatorSelected({ bg = "#0d1117", fg = "#07090c" }),
    BufferLinePick({ bg = "#090c11", fg = "#f85149", gui = "bold,italic" }),
    BufferLineOffsetSeparator({ bg = "#07090c", fg = "#161b22" }),
    BufferLineHint({ bg = "#090c11", fg = "#8b949e", sp = "#7d8590" }),
    BufferLineBufferVisible({ bg = "#0b0f15", fg = "#8b949e" }),
    BufferLineWarning({ bg = "#090c11", fg = "#8b949e", sp = "#d29922" }),
    BufferLineBackground({ bg = "#090c11", fg = "#8b949e" }),
    BufferLineGroupLabel({ bg = "#8b949e", fg = "#07090c" }),
    BufferLineInfo({ bg = "#090c11", fg = "#8b949e", sp = "#2f81f7" }),
    BufferLineTab({ fg = "#8b949e" }),
    BufferLineCloseButtonVisible({ bg = "#0b0f15", fg = "#8b949e" }),
    BufferLineDiagnosticVisible({ bg = "#0b0f15", fg = "#686f76" }),
    TodoSignNOTE({ fg = "#7d8590" }),
    TodoFgNOTE({ fg = "#7d8590" }),
    TodoBgNOTE({ bg = "#7d8590", fg = "#0d1117", gui = "bold" }),
    TodoSignPERF({ fg = "#e6edf3" }),
    TodoFgPERF({ fg = "#e6edf3" }),
    TodoBgPERF({ bg = "#e6edf3", fg = "#0d1117", gui = "bold" }),
    TodoSignTEST({ fg = "#e6edf3" }),
    TodoFgTEST({ fg = "#e6edf3" }),
    TodoBgTEST({ bg = "#e6edf3", fg = "#0d1117", gui = "bold" }),
    TodoSignWARN({ fg = "#d29922" }),
    TodoFgWARN({ fg = "#d29922" }),
    TodoBgWARN({ bg = "#d29922", fg = "#0d1117", gui = "bold" }),
    TodoSignHACK({ fg = "#d29922" }),
    TodoFgHACK({ fg = "#d29922" }),
    TodoBgHACK({ bg = "#d29922", fg = "#0d1117", gui = "bold" }),
    TodoSignFIX({ fg = "#f85149" }),
    TodoFgFIX({ fg = "#f85149" }),
    TodoBgFIX({ bg = "#f85149", fg = "#0d1117", gui = "bold" }),
    TodoSignTODO({ fg = "#2f81f7" }),
    TodoFgTODO({ fg = "#2f81f7" }),
    TodoBgTODO({ bg = "#2f81f7", fg = "#0d1117", gui = "bold" }),
    SnacksBackdrop({ bg = "#000000" }),
    MiniPickMatchRanges({ fg = "#d29922" }),
    MiniPickPrompt({ fg = "#79c0ff" }),
    IndentBlanklineContextStart({ gui = "underline", sp = "#f0883e" }),
    sym("@constructor.lua")({ fg = "#e6edf3" }),
    NvimTreeImageFile({ fg = "#e3b341" }),
    NvimTreeRootFolder({ fg = "#e6edf3", gui = "bold" }),
    NvimTreeEndOfBuffer({ fg = "#04070d" }),
    MiniCursorword({ bg = "#17335a" }),
    MiniDiffOverChange({ bg = "#484f58", fg = "#e6edf3" }),
    MiniPickHeader({ fg = "#79c0ff" }),
    NvimTreeGitRenamed({ fg = "#a371f7" }),
    sym("@variable.parameter.vimdoc")({ fg = "#ffa657" }),
    MiniClueNextKey({ fg = "#2f81f7" }),
    MiniStarterFooter({ fg = "#6e7681", gui = "italic" }),
    MiniStarterHeader({ fg = "#58a6ff" }),
    MiniStarterItemBullet({ fg = "#161b22" }),
    MiniStarterItemPrefix({ fg = "#d29922" }),
    MiniStarterQuery({ fg = "#2f81f7" }),
    MiniStatuslineDevinfo({ bg = "#484f58", fg = "#e6edf3" }),
    MiniStatuslineFileinfo({ bg = "#484f58", fg = "#e6edf3" }),
    MiniStatuslineFilename({ bg = "#0d1117", fg = "#7a7f85" }),
    MiniStatuslineInactive({ bg = "#04070d", fg = "#7a7f85" }),
    MiniStatuslineModeCommand({ bg = "#d2a8ff", fg = "#0d1117", gui = "bold" }),
    MiniStatuslineModeInsert({ bg = "#3fb950", fg = "#0d1117", gui = "bold" }),
    MiniStatuslineModeNormal({ bg = "#58a6ff", fg = "#0d1117", gui = "bold" }),
    MiniStatuslineModeOther({ fg = "#0d1117", gui = "bold" }),
    MiniStatuslineModeReplace({ bg = "#ff7b72", fg = "#0d1117", gui = "bold" }),
    lessVariable({ fg = "#e6edf3" }),
    MiniTablineModifiedHidden({ bg = "#e6edf3", fg = "#0d1117" }),
    MiniTablineModifiedVisible({ bg = "#04070d", fg = "#43698b" }),
    MiniTablineTabpagesection({ bg = "#1c3d6a", gui = "bold" }),
    MiniTestFail({ fg = "#ff7b72", gui = "bold" }),
    MiniTestPass({ fg = "#3fb950", gui = "bold" }),
    MiniTrailspace({ bg = "#ff7b72" }),
    CmpItemKindSnippet({ fg = "#7d8590" }),
    NeoTreeTitleBar({ bg = "#5197e8", fg = "#0d1117" }),
    NeoTreeEndOfBuffer({ fg = "#04070d" }),
    NeoTreeIndentMarker({ fg = "#8b949e" }),
    NeoTreeRootName({ fg = "#e6edf3", gui = "bold" }),
    NeoTreeDirectoryName({ fg = "#e6edf3" }),
    NeoTreeDirectoryIcon({ fg = "#e6edf3" }),
    NeoTreeDotfile({ fg = "#335c8b" }),
    NeoTreeSymbolicLinkTarget({ fg = "#824569" }),
    NeoTreeFileName({ fg = "#e6edf3" }),
    NeoTreeFileNameOpened({ fg = "#79c0ff" }),
    NeoTreeGitModified({ fg = "#80CBC4" }),
    NeoTreeGitAdded({ fg = "#3fb950" }),
    NeoTreeGitDeleted({ fg = "#f85149" }),
    NeoTreeGitConflict({ fg = "#db6d28", gui = "italic" }),
    NeoTreeGitIgnored({ fg = "#6e7681" }),
    NeoTreeGitUntracked({ fg = "#6cced5" }),
    NotifyDEBUGTitle({ fg = "#e6edf3" }),
    NotifyTRACETitle({ fg = "#d2a8ff" }),
    NotifyERRORTitle({ fg = "#ff7b72" }),
    NotifyWARNTitle({ fg = "#d29922" }),
    NotifyINFOTitle({ fg = "#3fb950" }),
    NvimTreeGitNew({ fg = "#3fb950" }),
    NvimTreeSpecialFile({ fg = "#d29922", gui = "underline" }),
    NvimTreeIndentMarker({ fg = "#8b949e" }),
    NvimTreeSymlink({ fg = "#bc8cff" }),
    NvimTreeFolderName({ fg = "#e6edf3" }),
    TreesitterContext({ bg = "#132339" }),
    WhichKeyFloat({ bg = "#04070d" }),
    NvimTreeGitDirty({ fg = "#d29922" }),
    NvimTreeGitIgnored({ fg = "#8b949e" }),
    NvimTreeOpenedFolderName({ fg = "#e6edf3", gui = "bold" }),
    CmpDocumentation({ bg = "#04070d", fg = "#e6edf3" }),
    CmpDocumentationBorder({ bg = "#04070d", fg = "#17335a" }),
    CmpItemAbbr({ fg = "#e6edf3" }),
    CmpItemAbbrDeprecated({ fg = "#ffa198", gui = "strikethrough" }),
    CmpItemAbbrMatch({ fg = "#d2a8ff" }),
    CmpItemAbbrMatchFuzzy({ fg = "#d2a8ff" }),
    CmpItemKindDefault({ fg = "#7d8590" }),
    DapUIType({ fg = "#bc8cff" }),
    NeogitDiffContextHighlight({ bg = "#171b22" }),
    TelescopeSelectionCaret({ fg = "#2f81f7" }),
    sym("@markup.link.uri")({ fg = "#79c0ff", gui = "underline,italic" }),
    yamlFlowMappingKey({ fg = "#7ee787" }),
    yamlBlockMappingKey({ fg = "#7ee787" }),
    MiniTablineVisible({ bg = "#43698b", fg = "#04070d" }),
    jsonKeyword({ fg = "#7ee787" }),
    MiniTablineModifiedCurrent({ fg = "#5e94c5", gui = "bold" }),
    MiniTablineHidden({ fg = "#e6edf3" }),
    MiniTablineCurrent({ bg = "#5e94c5", fg = "#04070d", gui = "bold" }),
    MiniStatuslineModeVisual({ bg = "#d29922", fg = "#0d1117", gui = "bold" }),
    GitGutterDelete({ fg = "#f85149" }),
    GitGutterChange({ fg = "#d29922" }),
    GitGutterAdd({ fg = "#3fb950" }),
    MiniCursorwordCurrent({ bg = "#17335a" }),
    LspTroubleCount({ bg = "#6e7681", fg = "#bc8cff" }),
    sym("@string.special.path.gitignore")({ fg = "#d2a8ff" }),
    NvimTreeOpenedFile({ fg = "#79c0ff" }),
    NvimTreeGitDeleted({ fg = "#f85149" }),
    htmlTag({ fg = "#7ee787" }),
    cssBraces({ fg = "#e6edf3" }),
    DapUIThread({ fg = "#3fb950", gui = "bold" }),
    DapUIScope({ fg = "#76e3ea" }),
    DapUIWatchesEmpty({ fg = "#ff7b72" }),
    DapUIWatchesValue({ fg = "#3fb950" }),
    DapUIBreakpointsDisabledLine({ fg = "#6e7681" }),
    DapUIModifiedValue({ fg = "#76e3ea", gui = "bold" }),
    DashboardFooter({ fg = "#79c0ff", gui = "italic" }),
    IndentBlanklineChar({ fg = "#23272d" }),
    IndentBlanklineContextChar({ fg = "#475f68" }),
    LspTroubleText({ fg = "#7d8590" }),
    LspTroubleNormal({ bg = "#04070d", fg = "#6e7681" }),
    MiniClueSeparator({ fg = "#7d8590" }),
    MiniDiffSignAdd({ fg = "#3fb950" }),
    MiniDiffSignChange({ fg = "#d29922" }),
    MiniDiffSignDelete({ fg = "#f85149" }),
    MiniFilesFile({ fg = "#e6edf3" }),
    MiniFilesTitleFocused({ fg = "#e6edf3", gui = "bold" }),
    MiniJump2dSpot({ fg = "#bc8cff", gui = "bold" }),
    MiniJump2dSpotAhead({ fg = "#2f81f7", gui = "nocombine" }),
    MiniJump2dSpotUnique({ fg = "#d29922", gui = "bold" }),
    MiniMapSymbolLine({ fg = "#2f81f7" }),
    MiniMapSymbolView({ fg = "#1e4273" }),
    MiniIconsPurple({ fg = "#bc8cff" }),
    MiniIconsGreen({ fg = "#56d364" }),
    MiniIconsBlue({ fg = "#58a6ff" }),
    sym("@markup.list.checked")({ fg = "#3fb950" }),
    BufferLineIndicatorSelected({ bg = "#0d1117", fg = "#6e7681" }),
    diffOldFile({ fg = "#d29922" }),
    sym("@markup.list.unchecked")({ fg = "#6e7681" }),
    GitSignsAdd({ fg = "#AEE8AF" }),
    GitSignsChange({ fg = "#72A7d7" }),
    GitSignsDelete({ fg = "#E0787c" }),
    MiniIconsOrange({ fg = "#f0883e" }),
    diffIndexLine({ fg = "#ff7b72" }),
    NormalSB({ bg = "#04070d", fg = "#e6edf3" }),
    MiniIconsRed({ fg = "#ff7b72" }),
    MiniIconsYellow({ fg = "#e3b341" }),
    diffLine({ fg = "#79c0ff" }),
    diffFile({ fg = "#2f81f7" }),
    MiniIconsGrey({ fg = "#e6edf3" }),
    MiniIconsAzure({ fg = "#79c0ff" }),
    MiniHipatternsTodo({ bg = "#7d8590", fg = "#04070d", gui = "bold" }),
    MiniHipatternsNote({ bg = "#2f81f7", fg = "#04070d", gui = "bold" }),
    MiniHipatternsHack({ bg = "#d29922", fg = "#04070d", gui = "bold" }),
    MiniHipatternsFixme({ bg = "#f85149", fg = "#04070d", gui = "bold" }),
    MiniIconsCyan({ fg = "#76e3ea" }),
    sym("@markup.list")({ fg = "#79c0ff" }),
    diffNewFile({ fg = "#7d8590" }),
    sym("@punctuation.bracket")({ fg = "#e6edf3" }),
    sym("@markup.environment.name")({ fg = "#d2a8ff" }),
    sym("@markup.environment")({ fg = "#ff7b72" }),
    sym("@comment.info")({ bg = "#2f81f7", fg = "#0d1117" }),
    sym("@comment.hint")({ bg = "#7d8590", fg = "#0d1117" }),
    sym("@markup.raw")({ fg = "#e6edf3", gui = "italic" }),
    DiagnosticUnderlineHint({ gui = "undercurl", sp = "#7d8590" }),
    DiagnosticUnderlineInfo({ gui = "undercurl", sp = "#2f81f7" }),
    DiagnosticUnderlineWarn({ gui = "undercurl", sp = "#d29922" }),
    DiagnosticUnderlineError({ gui = "undercurl", sp = "#ff7b72" }),
    MatchParen({ bg = "#1e4273", fg = "#e6edf3", gui = "bold" }),
    sym("@type.qualifier")({ fg = "#ff7b72" }),
    sym("@tag")({ fg = "#CCA06A" }),
    Changed({ bg = "#231e14", fg = "#80CBC4" }),
    DiffDelete({ bg = "#2c171b", fg = "#F77669" }),
    Removed({ bg = "#2c171b", fg = "#F77669" }),
    Added({ bg = "#10231c", fg = "#C3E887" }),
    DiffAdd({ bg = "#10231c", fg = "#C3E887" }),
    sym("@markup.link")({ fg = "#e6edf3", gui = "underline" }),
    sym("@markup.strikethrough")({ fg = "#e6edf3", gui = "strikethrough" }),
    sym("@markup.italic")({ fg = "#e6edf3", gui = "italic" }),
    sym("@markup.strong")({ fg = "#e6edf3", gui = "bold" }),
    Todo({ bg = "#2f81f7", fg = "#0d1117" }),
    sym("@comment.todo")({ bg = "#7d8590", fg = "#0d1117" }),
    sym("@comment.warning")({ bg = "#d29922", fg = "#0d1117" }),
    sym("@comment.error")({ bg = "#f85149", fg = "#0d1117" }),
    Operator({ fg = "#ffffff" }),
    sym("@constructor")({ fg = "#ffa657" }),
    Function({ fg = "#C7FFB8" }),
    Identifier({ fg = "#e6edf3" }),
    sym("@lsp.type.class")({ fg = "#FFDAAD" }),
    sym("@lsp.type.struct")({ fg = "#FFDAAD" }),
    sym("@lsp.type.enum")({ fg = "#FFDAAD" }),
    sym("@lsp.type.type.typescript")({ fg = "#79c0ff" }),
    sym("@type")({ fg = "#ffffff" }),
    sym("@string.special.url")({ fg = "#79c0ff", gui = "underline,italic" }),
    sym("@string.escape")({ fg = "#a5d6ff", gui = "bold" }),
    sym("@string.regexp")({ fg = "#a5d6ff" }),
    String({ fg = "#FFFCD7" }),
    sym("@module.builtin")({ fg = "#79c0ff" }),
    sym("@module")({ fg = "#94B0CB" }),
    sym("@constant.builtin")({ fg = "#79c0ff" }),
    sym("@variable.parameter.builtin")({ fg = "#79c0ff" }),
    sym("@variable.parameter")({ fg = "#e6edf3" }),
    sym("@variable.builtin")({ fg = "#79c0ff" }),
    sym("@variable")({ fg = "#e6edf3" }),
    Comment({ fg = "#7AE755", gui = "nocombine" }),
    DiagnosticVirtualTextHint({ fg = "#7d8590" }),
    DiagnosticHint({ fg = "#7d8590" }),
    DiagnosticInfo({ fg = "#2f81f7" }),
    SnacksPickerGitStatusModified({ fg = "#80CBC4" }),
    DiagnosticWarn({ fg = "#EED45F", bg = "#5C4F17" }),
    DiagnosticError({ fg = "#FD9491", bg = "#772E2C" }),
    LspSignatureActiveParameter({ fg = "#1c3d6a" }),
    LspReferenceWrite({ bg = "#17335a" }),
    LspReferenceText({ bg = "#17335a" }),
    LspReferenceRead({ bg = "#17335a" }),
    LspInlayHint({ bg = "#171b22", fg = "#8b949e" }),
    LspCodeLensSeparator({ fg = "#6e7681" }),
    LspCodeLens({ fg = "#8b949e" }),
    Special({ fg = "#e6edf3" }),
    Type({ fg = "#ffa657" }),
    PreProc({ fg = "#ff7b72" }),
    Keyword({ fg = "#A7D5FF" }),
    Statement({ fg = "#ff7b72" }),
    Conditional({ fg = "#ff7b72" }),
    Number({ fg = "#809DFF" }),
    FlashBackdrop({ fg = "#828282" }),
    Substitute({ bg = "#31f7f4", fg = "black", gui = "bold" }),
    Cursor({ bg = "#e6edf3", fg = "#0d1117" }),
    WinBarNC({ bg = "#0d1117", fg = "#6e7681", gui = "bold" }),
    WinBar({ bg = "#0d1117", fg = "#6e7681", gui = "bold" }),
    FloatBorder({ fg = "#161b22" }),
    NormalFloat({ fg = "#e6edf3" }),
    NormalNC({ fg = "#e6edf3" }),
    Whitespace({ fg = "#484f58" }),
    ColorColumn({ bg = "#171b22" }),
    CursorLine({ bg = "#374045" }),
    TabLineSel({ fg = "#0d1117" }),
    TabLine({ fg = "#7d8590" }),
    PmenuThumb({ bg = "#17335a" }),
    PmenuSel({ bg = "#1c3d6a" }),
    Pmenu({ bg = "#04070d", fg = "#e6edf3" }),
    SpellLocal({ gui = "undercurl", sp = "#2f81f7" }),
    SpellRare({ gui = "undercurl", sp = "#2f81f7" }),
    SpellCap({ gui = "undercurl", sp = "#d29922" }),
    SpellBad({ gui = "undercurl", sp = "#f85149" }),
    Conceal({ fg = "#8b949e" }),
    SignColumn({ fg = "#6e7681" }),
    DiffText({ bg = "#171b22", fg = "#e6edf3" }),
    FoldColumn({ fg = "#6e7681" }),
    Folded({ bg = "#171b22", fg = "#6e7681" }),
    WarningMsg({ fg = "#d29922" }),
    Visual({ bg = "#4289ad" }),
    Title({ fg = "#79c0ff", gui = "bold" }),
    VertSplit({ fg = "#161b22" }),
    WinSeparator({ fg = "#161b22" }),
    MoreMsg({ fg = "#2f8cf7", gui = "bold" }),
    ModeMsg({ fg = "#d29922", gui = "bold" }),
    ErrorMsg({ fg = "#FD9491" }),
    EndOfBuffer({ fg = "#0d1117" }),
    Directory({ fg = "#ffffff" }),
    StatusLine({ bg = "#3f76b6", fg = "#04070d" }),
    StatusLineNC({
      bg = "#0d1117",
      fg = "#0d1117",
      gui = "underline",
      sp = "#04070d",
    }),
    BufferLineDuplicateVisible({
      bg = "#0b0f15",
      fg = "#848c96",
      gui = "italic",
    }),
    BufferLinePickVisible({
      bg = "#0b0f15",
      fg = "#f85149",
      gui = "bold,italic",
    }),
    BufferLinePickSelected({
      bg = "#0d1117",
      fg = "#f85149",
      gui = "bold,italic",
    }),
    BufferLineDuplicateSelected({
      bg = "#0d1117",
      fg = "#848c96",
      gui = "italic",
    }),
    BufferLineErrorDiagnosticSelected({
      bg = "#0d1117",
      fg = "#ba3c36",
      gui = "bold,italic",
      sp = "#ba3c36",
    }),
    BufferLineErrorDiagnostic({
      bg = "#090c11",
      fg = "#686f76",
      sp = "#ba3c36",
    }),
    BufferLineErrorSelected({
      bg = "#0d1117",
      fg = "#f85149",
      gui = "bold,italic",
      sp = "#f85149",
    }),
    BufferLineWarningDiagnosticSelected({
      bg = "#0d1117",
      fg = "#9d7219",
      gui = "bold,italic",
      sp = "#9d7219",
    }),
    BufferLineWarningDiagnostic({
      bg = "#090c11",
      fg = "#686f76",
      sp = "#9d7219",
    }),
    BufferLineWarningSelected({
      bg = "#0d1117",
      fg = "#d29922",
      gui = "bold,italic",
      sp = "#d29922",
    }),
    BufferLineInfoDiagnosticSelected({
      bg = "#0d1117",
      fg = "#2360b9",
      gui = "bold,italic",
      sp = "#2360b9",
    }),
    BufferLineInfoSelected({
      bg = "#0d1117",
      fg = "#2f81f7",
      gui = "bold,italic",
      sp = "#2f81f7",
    }),
    BufferLineHintDiagnosticSelected({
      bg = "#0d1117",
      fg = "#5d636c",
      gui = "bold,italic",
      sp = "#5d636c",
    }),
    BufferLineHintSelected({
      bg = "#0d1117",
      fg = "#7d8590",
      gui = "bold,italic",
      sp = "#7d8590",
    }),
    BufferLineDiagnosticSelected({
      bg = "#0d1117",
      fg = "#acb1b6",
      gui = "bold,italic",
    }),
    BufferLineNumbersSelected({
      bg = "#0d1117",
      fg = "#e6edf3",
      gui = "bold,italic",
    }),
    BufferLineBufferSelected({
      bg = "#0d1117",
      fg = "#e6edf3",
      gui = "bold,italic",
    }),
    NoiceHiddenCursor({ blend = 100, gui = "nocombine" }),
    lualine_transitional_lualine_a_normal_to_lualine_b_normal({
      bg = "#1c2f45",
      fg = "#58a6ff",
      gui = "nocombine",
    }),
    lualine_transitional_lualine_b_normal_to_lualine_c_normal({
      bg = "#0e1219",
      fg = "#1c2f45",
      gui = "nocombine",
    }),
    lualine_transitional_lualine_b_normal_to_lualine_x_11_normal({
      bg = "#0e1219",
      fg = "#1c2f45",
      gui = "nocombine",
    }),
    lualine_transitional_lualine_a_insert_to_lualine_b_insert({
      bg = "#173322",
      fg = "#3fb950",
      gui = "nocombine",
    }),
    lualine_transitional_lualine_b_insert_to_lualine_c_insert({
      bg = "#0e1318",
      fg = "#173322",
      gui = "nocombine",
    }),
    lualine_transitional_lualine_b_insert_to_lualine_x_11_insert({
      bg = "#0e1318",
      fg = "#173322",
      gui = "nocombine",
    }),
    lualine_c_filetype_MiniIconsAzure_normal({
      bg = "#0e1219",
      fg = "#79c0ff",
      gui = "nocombine",
    }),
    lualine_c_filetype_MiniIconsAzure_insert({
      bg = "#0e1318",
      fg = "#79c0ff",
      gui = "nocombine",
    }),
    lualine_c_filetype_MiniIconsAzure_visual({
      bg = "#0f1217",
      fg = "#79c0ff",
      gui = "nocombine",
    }),
    lualine_c_filetype_MiniIconsAzure_replace({
      bg = "#0f1218",
      fg = "#79c0ff",
      gui = "nocombine",
    }),
    lualine_c_filetype_MiniIconsAzure_command({
      bg = "#0f1319",
      fg = "#79c0ff",
      gui = "nocombine",
    }),
    lualine_c_filetype_MiniIconsAzure_terminal({
      bg = "#0f1217",
      fg = "#79c0ff",
      gui = "nocombine",
    }),
    lualine_c_filetype_MiniIconsAzure_inactive({
      bg = "#04070d",
      fg = "#79c0ff",
      gui = "nocombine",
    }),
    lualine_c_16_LV_Bold_normal({
      bg = "#0e1219",
      fg = "#3a6aa2",
      gui = "bold,nocombine",
    }),
    lualine_c_16_LV_Bold_insert({
      bg = "#0e1318",
      fg = "#2b7639",
      gui = "bold,nocombine",
    }),
    lualine_c_16_LV_Bold_visual({
      bg = "#0f1217",
      fg = "#83631e",
      gui = "bold,nocombine",
    }),
    lualine_c_16_LV_Bold_replace({
      bg = "#0f1218",
      fg = "#9e514e",
      gui = "bold,nocombine",
    }),
    lualine_c_16_LV_Bold_command({
      bg = "#0f1319",
      fg = "#836ca2",
      gui = "bold,nocombine",
    }),
    lualine_c_16_LV_Bold_terminal({
      bg = "#0f1217",
      fg = "#95582e",
      gui = "bold,nocombine",
    }),
    lualine_c_16_LV_Bold_inactive({
      bg = "#04070d",
      fg = "#4e5359",
      gui = "bold,nocombine",
    }),
    lualine_transitional_lualine_b_normal_to_lualine_c_13_normal({
      bg = "#0e1219",
      fg = "#1c2f45",
      gui = "nocombine",
    }),
    lualine_transitional_lualine_b_normal_to_lualine_c_filetype_MiniIconsAzure_normal({
      bg = "#0e1219",
      fg = "#1c2f45",
      gui = "nocombine",
    }),
    lualine_transitional_lualine_a_command_to_lualine_b_command({
      bg = "#342f45",
      fg = "#d2a8ff",
      gui = "nocombine",
    }),
    lualine_transitional_lualine_b_command_to_lualine_c_filetype_MiniIconsAzure_command({
      bg = "#0f1319",
      fg = "#342f45",
      gui = "nocombine",
    }),
    lualine_transitional_lualine_b_command_to_lualine_x_11_command({
      bg = "#0f1319",
      fg = "#342f45",
      gui = "nocombine",
    }),
    lualine_c_16_LV_MatchParen_normal({
      bg = "#0e1219",
      fg = "#e6edf3",
      gui = "bold,nocombine",
    }),
    lualine_c_16_LV_MatchParen_insert({
      bg = "#0e1318",
      fg = "#e6edf3",
      gui = "bold,nocombine",
    }),
    lualine_c_16_LV_MatchParen_visual({
      bg = "#0f1217",
      fg = "#e6edf3",
      gui = "bold,nocombine",
    }),
    lualine_c_16_LV_MatchParen_replace({
      bg = "#0f1218",
      fg = "#e6edf3",
      gui = "bold,nocombine",
    }),
    lualine_c_16_LV_MatchParen_command({
      bg = "#0f1319",
      fg = "#e6edf3",
      gui = "bold,nocombine",
    }),
    lualine_c_16_LV_MatchParen_terminal({
      bg = "#0f1217",
      fg = "#e6edf3",
      gui = "bold,nocombine",
    }),
    lualine_transitional_lualine_b_normal_to_lualine_c_diagnostics_error_normal({
      bg = "#0e1219",
      fg = "#1c2f45",
      gui = "nocombine",
    }),
    --
    BlinkCmpDoc({ NormalFloat }),
    BlinkCmpDocBorder({ NormalFloat }),
    BlinkCmpDocCursorLine({ Visual }),
    BlinkCmpDocSeparator({ NormalFloat }),
    BlinkCmpGhostText({ NonText }),
    BlinkCmpMenu({ Pmenu }),
    BlinkCmpMenuBorder({ Pmenu }),
    BlinkCmpMenuSelection({ PmenuSel }),
    BlinkCmpScrollBarThumb({ PmenuThumb }),
    BlinkCmpSignatureHelp({ NormalFloat }),
    BlinkCmpSignatureHelpActiveParameter({ LspSignatureActiveParameter }),
    BlinkCmpSignatureHelpBorder({ NormalFloat }),
    Bold({ gui = "bold" }),
    Boolean({ Number }),
    Character({ String }),
    CmpItemKindClass({ Type }),
    CmpItemKindConstructor({ sym("@constructor") }),
    CmpItemKindEnum({ Constant }),
    CmpItemKindEnumMember({ sym("@variable.member") }),
    CmpItemKindEvent({ Constant }),
    CmpItemKindField({ sym("@variable.member") }),
    CmpItemKindFunction({ Function }),
    CmpItemKindInterface({ Constant }),
    CmpItemKindKeyword({ Keyword }),
    CmpItemKindMethod({ Function }),
    CmpItemKindModule({ sym("@module") }),
    CmpItemKindOperator({ Operator }),
    CmpItemKindReference({ Keyword }),
    CmpItemKindStruct({ Type }),
    CmpItemKindTypeParameter({ sym("@variable.member") }),
    CmpItemKindUnit({ Constant }),
    CmpItemKindValue({ Keyword }),
    CmpItemKindVariable({ sym("@variable") }),
    CmpItemMenu({ Comment }),
    CocExplorerNormalFloat({ NormalSB }),
    cssMedia({ Keyword }),
    cssProp({ Constant }),
    cssPseudoClassId({ Function }),
    CurSearch({ IncSearch }),
    CursorColumn({ CursorLine }),
    CursorIM({ Cursor }),
    CursorLineFold({ FoldColumn }),
    CursorLineSign({ SignColumn }),
    DapUIBreakpointsCurrentLine({ DapUIThread }),
    DapUIBreakpointsInfo({ DapUIWatchesValue }),
    DapUIBreakpointsPath({ DapUIScope }),
    DapUIDecoration({ DapUIScope }),
    DapUIFloatBorder({ DapUIScope }),
    DapUILineNumber({ DapUIScope }),
    DapUIPlayPause({ DapUIWatchesValue }),
    DapUIRestart({ DapUIWatchesValue }),
    DapUISource({ DapUIType }),
    DapUIStepBack({ DapUIScope }),
    DapUIStepInto({ DapUIScope }),
    DapUIStepOut({ DapUIScope }),
    DapUIStepOver({ DapUIScope }),
    DapUIStop({ DapUIWatchesEmpty }),
    DapUIStoppedThread({ DapUIScope }),
    DapUIUnavailable({ DapUIBreakpointsDisabledLine }),
    DapUIWatchesError({ DapUIWatchesEmpty }),
    DapUIWinSelect({ DapUIModifiedValue }),
    DashboardCenter({ String }),
    DashboardHeader({ Title }),
    DashboardShortCut({ Identifier }),
    Debug({ Special }),
    Define({ PreProc }),
    Delimiter({ Special }),
    DiagnosticDeprecated({ gui = "strikethrough", sp = "nvimlightred" }),
    DiagnosticFloatingError({ DiagnosticError }),
    DiagnosticOk({ fg = "nvimlightgreen" }),
    DiagnosticFloatingHint({ DiagnosticHint }),
    DiagnosticFloatingInfo({ DiagnosticInfo }),
    DiagnosticFloatingOk({ DiagnosticOk }),
    DiagnosticFloatingWarn({ fg = DiagnosticWarn.fg }),
    DiagnosticSignError({ fg = DiagnosticError.fg }),
    DiagnosticSignHint({ DiagnosticHint }),
    DiagnosticSignInfo({ DiagnosticInfo }),
    DiagnosticSignOk({ DiagnosticOk }),
    DiagnosticSignWarn({ fg = DiagnosticWarn.fg }),
    DiagnosticUnderlineOk({ gui = "underline", sp = "nvimlightgreen" }),
    DiagnosticUnnecessary({ NonText }),
    DiagnosticVirtualLinesError({ fg = DiagnosticError.fg }),
    DiagnosticVirtualLinesHint({ DiagnosticHint }),
    DiagnosticVirtualLinesInfo({ DiagnosticInfo }),
    DiagnosticVirtualLinesOk({ DiagnosticOk }),
    DiagnosticVirtualLinesWarn({ fg = DiagnosticWarn.fg }),
    DiagnosticVirtualTextError({ DiagnosticError }),
    DiagnosticVirtualTextInfo({ DiagnosticInfo }),
    DiagnosticVirtualTextOk({ DiagnosticOk }),
    DiagnosticVirtualTextWarn({ fg = DiagnosticWarn.fg }),
    diffAdded({ Added }),
    diffChanged({ Changed }),
    diffRemoved({ Removed }),
    Error({ fg = DiagnosticError.fg }),
    Exception({ Keyword }),
    FidgetTask({ LineNr }),
    FidgetTitle({ Title }),
    Float({ Number }),
    FloatShadow({ bg = "nvimdarkgrey4", blend = 80 }),
    FloatShadowThrough({ bg = "nvimdarkgrey4", blend = 100 }),
    FloatTitle({ Title }),
    FzfLuaBorder({ Normal }),
    FzfLuaCursor({ Cursor }),
    FzfLuaCursorLine({ CursorLine }),
    FzfLuaCursorLineNr({ CursorLineNr }),
    FzfLuaNormal({ Normal }),
    FzfLuaScrollFloatFull({ PmenuThumb }),
    FzfLuaSearch({ IncSearch }),
    FzfLuaTitle({ Title }),
    GitSignsAddCul({ GitSignsAdd }),
    GitSignsAddInline({ TermCursor }),
    GitSignsAddNr({ GitSignsAdd }),
    GitSignsChangeCul({ GitSignsChange }),
    GitSignsChangedelete({ GitSignsChange }),
    GitSignsChangeInline({ TermCursor }),
    GitSignsChangeNr({ GitSignsChange }),
    GitSignsCurrentLineBlame({ NonText }),
    GitSignsDeleteCul({ GitSignsDelete }),
    GitSignsDeleteInline({ TermCursor }),
    GitSignsDeleteNr({ GitSignsDelete }),
    GitSignsTopdelete({ GitSignsDelete }),
    GitSignsUntracked({ GitSignsAdd }),
    Ignore({ Normal }),
    Include({ PreProc }),
    Italic({ gui = "italic" }),
    jsonNull({ Constant }),
    Label({ Conditional }),
    lCursor({ Cursor }),
    lessAmpersand({ Function }),
    lessClass({ Function }),
    lessClassCall({ Function }),
    lessCssAttribute({ Constant }),
    lessFunction({ Constant }),
    LspReferenceTarget({ LspReferenceText }),
    luaComment({ Comment }),
    luaCond({ Conditional }),
    luaCondElse({ Conditional }),
    luaConstant({ Constant }),
    luaError({ Error }),
    luaFunc({ Identifier }),
    luaFunction({ Keyword }),
    lualine_x_7({ fg = DiagnosticError.fg }),
    luaMetaMethod({ Function }),
    luaNumber({ Number }),
    luaOperator({ Operator }),
    luaParenError({ Error }),
    luaStatement({ Statement }),
    luaString({ String }),
    luaString2({ String }),
    luaTodo({ Todo }),
    Macro({ PreProc }),
    MiniAnimateCursor({ gui = "reverse,nocombine" }),
    MiniAnimateNormalFloat({ NormalFloat }),
    MiniClueBorder({ FloatBorder }),
    MiniClueDescSingle({ NormalFloat }),
    MiniCompletionActiveParameter({ gui = "underline" }),
    MiniDepsHint({ DiagnosticHint }),
    MiniDepsInfo({ DiagnosticInfo }),
    MiniDepsMsgBreaking({ fg = DiagnosticWarn.fg }),
    MiniDepsPlaceholder({ Comment }),
    MiniDepsTitle({ Title }),
    MiniDepsTitleSame({ DiffText }),
    MiniFilesBorder({ FloatBorder }),
    MiniFilesCursorLine({ CursorLine }),
    MiniFilesDirectory({ Directory }),
    MiniFilesNormal({ NormalFloat }),
    MiniIndentscopePrefix({ gui = "nocombine" }),
    MiniJump({ SpellRare }),
    MiniJump2dDim({ Comment }),
    MiniMapNormal({ NormalFloat }),
    MiniMapSymbolCount({ Special }),
    MiniNotifyBorder({ FloatBorder }),
    MiniNotifyNormal({ NormalFloat }),
    MiniOperatorsExchangeFrom({ IncSearch }),
    MiniPickBorder({ FloatBorder }),
    MiniPickIconDirectory({ Directory }),
    MiniPickMatchCurrent({ CursorLine }),
    MiniPickMatchMarked({ Visual }),
    MiniPickNormal({ NormalFloat }),
    MiniPickPreviewLine({ CursorLine }),
    MiniPickPreviewRegion({ IncSearch }),
    MiniStarterCurrent({ gui = "nocombine" }),
    MiniStarterInactive({ Comment }),
    MiniStarterItem({ Normal }),
    MiniStarterSection({ Special }),
    MiniSurround({ IncSearch }),
    MiniTablineFill({ TabLineFill }),
    MiniTestEmphasis({ gui = "bold" }),
    MsgSeparator({ StatusLine }),
    NeoTreeDimText({ Conceal }),
    NeoTreeNormal({ NormalSB }),
    NoiceCmdlinePopup({ Normal }),
    NoiceCmdlinePrompt({ Title }),
    NoiceCompletionItemKindDefault({ Special }),
    NoiceConfirm({ Normal }),
    NoiceCursor({ Cursor }),
    NoiceFormatConfirm({ CursorLine }),
    NoiceFormatConfirmDefault({ Visual }),
    NoiceFormatDate({ Special }),
    NoiceFormatEvent({ NonText }),
    NoiceFormatKind({ NonText }),
    NoiceFormatLevelDebug({ NonText }),
    NoiceFormatLevelError({ DiagnosticVirtualTextError }),
    NoiceFormatLevelInfo({ DiagnosticVirtualTextInfo }),
    NoiceFormatLevelOff({ NonText }),
    NoiceFormatLevelTrace({ NonText }),
    NoiceFormatLevelWarn({ DiagnosticVirtualTextWarn }),
    NoiceFormatProgressTodo({ CursorLine }),
    NoiceFormatTitle({ Title }),
    NoiceLspProgressClient({ Title }),
    NoiceLspProgressSpinner({ Constant }),
    NoiceLspProgressTitle({ NonText }),
    NoicePopup({ NormalFloat }),
    NoicePopupBorder({ FloatBorder }),
    NoicePopupmenu({ Pmenu }),
    NoicePopupmenuBorder({ FloatBorder }),
    NoicePopupmenuMatch({ Special }),
    NoicePopupmenuSelected({ PmenuSel }),
    NoiceScrollbarThumb({ PmenuThumb }),
    NoiceSplit({ NormalFloat }),
    NoiceSplitBorder({ FloatBorder }),
    NoiceVirtualText({ DiagnosticVirtualTextInfo }),
    NotifyDEBUGBody({ NotifyDEBUGTitle }),
    NotifyDEBUGBorder({ NotifyDEBUGTitle }),
    NotifyDEBUGIcon({ NotifyDEBUGTitle }),
    NotifyERRORBody({ NotifyERRORTitle }),
    NotifyERRORBorder({ NotifyERRORTitle }),
    NotifyERRORIcon({ NotifyERRORTitle }),
    NotifyINFOBody({ NotifyINFOTitle }),
    NotifyINFOBorder({ NotifyINFOTitle }),
    NotifyINFOIcon({ NotifyINFOTitle }),
    NotifyTRACEBody({ NotifyTRACETitle }),
    NotifyTRACEBorder({ NotifyTRACETitle }),
    NotifyTRACEIcon({ NotifyTRACETitle }),
    NotifyWARNBody({ NotifyWARNTitle }),
    NotifyWARNBorder({ NotifyWARNTitle }),
    NotifyWARNIcon({ NotifyWARNTitle }),
    NvimAssignment({ Operator }),
    NvimInternalError({ bg = "red", fg = "red" }),
    NvimFigureBrace({ NvimInternalError }),
    NvimIdentifier({ Identifier }),
    NvimInvalid({ Error }),
    NvimInvalidSingleQuotedUnknownEscape({ NvimInternalError }),
    NvimInvalidSpacing({ ErrorMsg }),
    NvimNumber({ Number }),
    NvimNumberPrefix({ Type }),
    NvimOperator({ Operator }),
    NvimOptionSigil({ Type }),
    NvimSingleQuotedUnknownEscape({ NvimInternalError }),
    NvimSpacing({ Normal }),
    NvimString({ String }),
    NvimTreeNormal({ NormalSB }),
    PmenuExtra({ Pmenu }),
    PmenuExtraSel({ PmenuSel }),
    PmenuKind({ Pmenu }),
    PmenuKindSel({ PmenuSel }),
    PmenuMatch({ gui = "bold" }),
    PmenuMatchSel({ gui = "bold" }),
    PmenuSbar({ Pmenu }),
    PreCondit({ PreProc }),
    qfFileName({ Directory }),
    qfLineNr({ LineNr }),
    Question({ MoreMsg }),
    QuickFixLine({ CursorLine }),
    RedrawDebugClear({ bg = "nvimdarkyellow" }),
    RedrawDebugComposed({ bg = "nvimdarkgreen" }),
    RedrawDebugNormal({ gui = "reverse" }),
    RedrawDebugRecompose({ bg = "nvimdarkred" }),
    Repeat({ Conditional }),
    SignColumnSB({ SignColumn }),
    SnacksDashboardDesc({ Special }),
    SnacksDashboardDir({ NonText }),
    SnacksDashboardFile({ Special }),
    SnacksDashboardFooter({ Title }),
    SnacksDashboardHeader({ Title }),
    SnacksDashboardIcon({ Special }),
    SnacksDashboardKey({ Number }),
    SnacksDashboardNormal({ Normal }),
    SnacksDashboardSpecial({ Special }),
    SnacksDashboardTitle({ Title }),
    SnacksIndent({ NonText }),
    SnacksIndent1({ DiagnosticInfo }),
    SnacksIndent2({ DiagnosticHint }),
    SnacksIndent3({ fg = DiagnosticWarn.fg }),
    SnacksIndent4({ fg = DiagnosticError.fg }),
    SnacksIndent5({ DiagnosticInfo }),
    SnacksIndent6({ DiagnosticHint }),
    SnacksIndent7({ fg = DiagnosticWarn.fg }),
    SnacksIndent8({ fg = DiagnosticError.fg }),
    SnacksIndentScope({ Special }),
    SnacksInputBorder({ DiagnosticInfo }),
    SnacksInputIcon({ DiagnosticHint }),
    SnacksInputNormal({ Normal }),
    SnacksInputTitle({ DiagnosticInfo }),
    SnacksNormal({ NormalFloat }),
    SnacksNormalNC({ NormalFloat }),
    SnacksNotifierBorderDebug({ NonText }),
    SnacksNotifierBorderError({ fg = DiagnosticError.fg }),
    SnacksNotifierBorderInfo({ DiagnosticInfo }),
    SnacksNotifierBorderTrace({ NonText }),
    SnacksNotifierBorderWarn({ fg = DiagnosticWarn.fg }),
    SnacksNotifierDebug({ Normal }),
    SnacksNotifierError({ Normal }),
    SnacksNotifierFooterDebug({ NonText }),
    SnacksNotifierFooterError({ fg = DiagnosticError.fg }),
    SnacksNotifierFooterInfo({ DiagnosticInfo }),
    SnacksNotifierFooterTrace({ NonText }),
    SnacksNotifierFooterWarn({ fg = DiagnosticWarn.fg }),
    SnacksNotifierHistory({ Normal }),
    SnacksNotifierHistoryDateTime({ Special }),
    SnacksNotifierHistoryTitle({ Title }),
    SnacksNotifierIconDebug({ NonText }),
    SnacksNotifierIconTrace({ NonText }),
    SnacksNotifierInfo({ Normal }),
    SnacksNotifierMinimal({ NormalFloat }),
    SnacksNotifierTitleDebug({ NonText }),
    SnacksNotifierTitleError({ fg = DiagnosticError.fg }),
    SnacksNotifierTitleInfo({ DiagnosticInfo }),
    SnacksNotifierTitleTrace({ NonText }),
    SnacksNotifierTitleWarn({ fg = DiagnosticWarn.fg }),
    SnacksNotifierTrace({ Normal }),
    SnacksNotifierWarn({ Normal }),
    SnacksPicker({ NormalFloat }),
    SnacksPickerAuEvent({ Constant }),
    SnacksPickerAuGroup({ Type }),
    SnacksPickerAuPattern({ String }),
    SnacksPickerBold({ Bold }),
    SnacksPickerBorder({ FloatBorder }),
    SnacksPickerBufFlags({ NonText }),
    SnacksPickerBufNr({ Number }),
    SnacksPickerCmd({ Function }),
    SnacksPickerCmdBuiltin({ sym("@constructor") }),
    SnacksPickerCol({ LineNr }),
    SnacksPickerComment({ Comment }),
    SnacksPickerCursorLine({ CursorLine }),
    SnacksPickerDesc({ Comment }),
    SnacksPickerDiagnosticCode({ Special }),
    SnacksPickerDiagnosticSource({ Comment }),
    SnacksPickerDimmed({ Conceal }),
    SnacksPickerDir({ NonText }),
    SnacksPickerDirectory({ Directory }),
    SnacksPickerGitBranch({ Title }),
    SnacksPickerGitBranchCurrent({ Number }),
    SnacksPickerGitBreaking({ Error }),
    SnacksPickerGitCommit({ sym("@variable.builtin") }),
    SnacksPickerGitDate({ Special }),
    SnacksPickerGitDetached({ fg = DiagnosticWarn.fg }),
    SnacksPickerGitIssue({ Number }),
    SnacksPickerGitScope({ Italic }),
    SnacksPickerGitStatus({ Special }),
    SnacksPickerGitStatusAdded({ Added }),
    SnacksPickerGitStatusDeleted({ Removed }),
    SnacksPickerGitStatusIgnored({ NonText }),
    SnacksPickerGitStatusStaged({ DiagnosticHint }),
    SnacksPickerGitStatusUnmerged({ fg = DiagnosticError.fg }),
    SnacksPickerGitStatusUntracked({ NonText }),
    SnacksPickerGitType({ Title }),
    SnacksPickerIcon({ Special }),
    SnacksPickerIconArray({ sym("@punctuation.bracket") }),
    SnacksPickerIconCategory({ sym("@module") }),
    SnacksPickerIconClass({ sym("@type") }),
    SnacksPickerIconConstructor({ sym("@constructor") }),
    SnacksPickerIconEvent({ Special }),
    SnacksPickerIconField({ sym("@variable.member") }),
    SnacksPickerIconFile({ Normal }),
    SnacksPickerIconModule({ sym("@module") }),
    SnacksPickerIconNamespace({ sym("@module") }),
    SnacksPickerIconNull({ sym("@constant.builtin") }),
    SnacksPickerIconPackage({ sym("@module") }),
    SnacksPickerIconVariable({ sym("@variable") }),
    SnacksPickerIdx({ Number }),
    SnacksPickerItalic({ Italic }),
    SnacksPickerKeymapLhs({ Special }),
    SnacksPickerKeymapMode({ Number }),
    SnacksPickerKeymapNowait({ sym("@variable.builtin") }),
    SnacksPickerKeymapRhs({ NonText }),
    SnacksPickerLink({ Comment }),
    SnacksPickerLinkBroken({ fg = DiagnosticError.fg }),
    SnacksPickerListCursorLine({ Visual }),
    SnacksPickerLspAttached({ fg = DiagnosticWarn.fg }),
    SnacksPickerLspAttachedBuf({ DiagnosticInfo }),
    SnacksPickerLspDisabled({ fg = DiagnosticWarn.fg }),
    SnacksPickerLspEnabled({ Special }),
    SnacksPickerLspUnavailable({ fg = DiagnosticError.fg }),
    SnacksPickerManPage({ Special }),
    SnacksPickerManSection({ Number }),
    SnacksPickerMatch({ Special }),
    SnacksPickerPathHidden({ NonText }),
    SnacksPickerPathIgnored({ NonText }),
    SnacksPickerPickWin({ Search }),
    SnacksPickerPreviewCursorLine({ Visual }),
    SnacksPickerPrompt({ Special }),
    SnacksPickerRegister({ Number }),
    SnacksPickerRow({ String }),
    SnacksPickerSearch({ Search }),
    SnacksPickerSelected({ Number }),
    SnacksPickerSpecial({ Special }),
    SnacksPickerSpinner({ Special }),
    SnacksPickerTime({ Special }),
    SnacksPickerToggle({ DiagnosticVirtualTextInfo }),
    SnacksPickerTotals({ NonText }),
    SnacksPickerTree({ LineNr }),
    SnacksPickerUndoAdded({ Added }),
    SnacksPickerUndoCurrent({ sym("@variable.builtin") }),
    SnacksPickerUndoRemoved({ Removed }),
    SnacksPickerUndoSaved({ Special }),
    SnacksPickerUnselected({ NonText }),
    SnacksStatusColumnMark({ DiagnosticHint }),
    SnacksWinBar({ Title }),
    SnacksWinKey({ Keyword }),
    SnacksWinKeyDesc({ Function }),
    SnacksWinKeySep({ NonText }),
    SnippetTabstop({ Visual }),
    SpecialChar({ Special }),
    SpecialComment({ Special }),
    SpecialKey({ NonText }),
    StatusLineTerm({ StatusLine }),
    StatusLineTermNC({ StatusLineNC }),
    StorageClass({ Type }),
    Structure({ Type }),
    sym("@attribute.builtin")({ Special }),
    sym("@attribute")({ Constant }),
    sym("@comment.note")({ DiagnosticInfo }),
    sym("@comment")({ Comment }),
    sym("@conceal")({ Conceal }),
    sym("@constant.html")({ sym("@tag") }),
    sym("@constant")({ Constant }),
    sym("@function")({ Function }),
    sym("@keyword.exception")({ Keyword }),
    sym("@keyword.function")({ Keyword }),
    sym("@keyword")({ Keyword }),
    sym("@label")({ sym("@tag") }),
    sym("@lsp.mod.deprecated")({ DiagnosticDeprecated }),
    sym("@lsp.type.event")({ sym("@type") }),
    sym("@lsp.type.identifier")({ sym("@lsp.type.struct") }),
    sym("@lsp.type.modifier")({ sym("@type.qualifier") }),
    sym("@lsp.type.parameter")({ sym("@variable.parameter") }),
    sym("@lsp.type.regexp")({ sym("@string.regexp") }),
    sym("@lsp.type.type")({ sym("@type") }),
    sym("@lsp.typemod.variable.defaultLibrary")({ sym("@variable.builtin") }),
    sym("@lsp.typemod.variable.injected")({ sym("@variable") }),
    sym("@markup.link.label")({ Special }),
    sym("@markup.underline")({ gui = "underline" }),
    sym("@markup")({ Special }),
    sym("@module.elixir")({ sym("@type") }),
    sym("@number")({ Number }),
    sym("@operator")({ Operator }),
    sym("@property.json")({ sym("@tag") }),
    sym("@property.yaml")({ sym("@tag") }),
    sym("@property")({ sym("@variable.member") }),
    sym("@punctuation.special")({ Special }),
    sym("@string")({ String }),
    sym("@tag.attribute")({ sym("@variable.member") }),
    sym("@tag.builtin")({ sym("@tag") }),
    sym("@type.builtin")({ Keyword }),
    sym("@type.css")({ htmlTag }),
    sym("@type.sql")({ sym("@variable") }),
    sym("@variable.parameter.nix")({ sym("@variable.parameter") }),
    sym("@variable.scss")({ sym("@variable.parameter") }),
    Tag({ Special }),
    TelescopeMatching({ Search }),
    TelescopeSelection({ CursorLine }),
    TinyInlineInvDiagnosticVirtualTextError({ Visual }),
    TinyInlineInvDiagnosticVirtualTextHint({ Visual }),
    TinyInlineInvDiagnosticVirtualTextInfo({ Visual }),
    TinyInlineInvDiagnosticVirtualTextWarn({ Visual }),
    TroubleCode({ Special }),
    TroubleCount({ TabLineSel }),
    TroubleDiagnosticsCode({ Comment }),
    TroubleDiagnosticsItemSource({ Comment }),
    TroubleDirectory({ Directory }),
    TroubleFilename({ Directory }),
    TroubleIconArray({ sym("@punctuation.bracket") }),
    TroubleIconClass({ sym("@type") }),
    TroubleIconConstructor({ sym("@constructor") }),
    TroubleIconDirectory({ Special }),
    TroubleIconEvent({ Special }),
    TroubleIconField({ sym("@variable.member") }),
    TroubleIconFile({ Normal }),
    TroubleIconModule({ sym("@module") }),
    TroubleIconNamespace({ sym("@module") }),
    TroubleIconNull({ sym("@constant.builtin") }),
    TroubleIconPackage({ sym("@module") }),
    TroubleIconVariable({ sym("@variable") }),
    TroubleIndent({ LineNr }),
    TroubleIndentFoldClosed({ CursorLineNr }),
    TroubleNormal({ NormalFloat }),
    TroubleNormalNC({ NormalFloat }),
    TroublePos({ LineNr }),
    TroublePreview({ Visual }),
    TroubleSource({ Comment }),
    TroubleText({ Normal }),
    Typedef({ Type }),
    Underlined({ gui = "underline" }),
    VisualNOS({ Visual }),
    WhichKey({ Identifier }),
    WhichKeyBorder({ FloatBorder }),
    WhichKeyDesc({ Keyword }),
    WhichKeyGroup({ Function }),
    WhichKeyIcon({ sym("@markup.link") }),
    WhichKeyIconAzure({ MiniIconsAzure }),
    WhichKeyIconBlue({ MiniIconsBlue }),
    WhichKeyIconCyan({ MiniIconsCyan }),
    WhichKeyIconGreen({ MiniIconsGreen }),
    WhichKeyIconGrey({ MiniIconsGrey }),
    WhichKeyIconOrange({ MiniIconsOrange }),
    WhichKeyIconPurple({ MiniIconsPurple }),
    WhichKeyIconRed({ MiniIconsRed }),
    WhichKeyIconYellow({ MiniIconsYellow }),
    WhichKeyNormal({ NormalFloat }),
    WhichKeySeparator({ Comment }),
    WhichKeySeperator({ Comment }),
    WhichKeyValue({ Comment }),
    WildMenu({ Pmenu }),
    xmlAttrib({ htmlTag }),
    xmlTagName({ htmlTag }),
    YankyPut({ Search }),
    YankyYanked({ Search }),
  }
end)
return theme
